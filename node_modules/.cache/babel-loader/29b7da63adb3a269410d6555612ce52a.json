{"ast":null,"code":"var _jsxFileName = \"/Users/conormccormack/datastructs/src/components/searchbar.js\";\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Autosuggest from 'react-autosuggest';\nconst datastructures = [{\n  name: \"AVL Tree\",\n  category: \"Tree\"\n}, {\n  name: \"Stack\",\n  category: \"Stack & Queues\"\n}, {\n  name: \"Queue\",\n  category: \"Stack & Queues\"\n}, {\n  name: \"Splay Tree\",\n  category: \"Tree\"\n}, {\n  name: \"Linked List\",\n  category: \"Basics\"\n}, {\n  name: \"Binary Search Tree\",\n  category: \"Tree\"\n}]; // Generate suggestions list based on user input matching to suggestion names.\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  return inputLength === 0 ? [] : datastructures.filter(datastruct => datastruct.name.toLowerCase().slice(0, inputLength) === inputValue);\n}; // Retrieve value from suggestion that user has chosen\n\n\nconst getSuggestionValue = suggestion => suggestion.name;\n\nconst renderSuggestion = suggestion => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }\n}, suggestion.name);\n\nclass Searchbar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  } // Update value onChange.\n\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state;\n    const inputProps = {\n      placeholder: 'Type a data structure...',\n      value,\n      onChange: this.onChange\n    };\n    return /*#__PURE__*/React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default Searchbar;","map":{"version":3,"sources":["/Users/conormccormack/datastructs/src/components/searchbar.js"],"names":["React","Component","styled","Autosuggest","datastructures","name","category","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","datastruct","slice","getSuggestionValue","suggestion","renderSuggestion","Searchbar","constructor","props","onChange","event","newValue","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","render","inputProps","placeholder"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AAEA,MAAMC,cAAc,GAAG,CACnB;AACIC,EAAAA,IAAI,EAAE,UADV;AAEIC,EAAAA,QAAQ,EAAE;AAFd,CADmB,EAKnB;AACID,EAAAA,IAAI,EAAE,OADV;AAEIC,EAAAA,QAAQ,EAAE;AAFd,CALmB,EASnB;AACID,EAAAA,IAAI,EAAE,OADV;AAEIC,EAAAA,QAAQ,EAAE;AAFd,CATmB,EAanB;AACID,EAAAA,IAAI,EAAE,YADV;AAEIC,EAAAA,QAAQ,EAAE;AAFd,CAbmB,EAiBnB;AACID,EAAAA,IAAI,EAAE,aADV;AAEIC,EAAAA,QAAQ,EAAE;AAFd,CAjBmB,EAqBnB;AACID,EAAAA,IAAI,EAAE,oBADV;AAEIC,EAAAA,QAAQ,EAAE;AAFd,CArBmB,CAAvB,C,CA2BA;;AACA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAC5B,QAAMC,UAAU,GAAGD,KAAK,CAACE,IAAN,GAAaC,WAAb,EAAnB;AACA,QAAMC,WAAW,GAAGH,UAAU,CAACI,MAA/B;AAEA,SAAOD,WAAW,KAAK,CAAhB,GAAoB,EAApB,GAAyBR,cAAc,CAACU,MAAf,CAAsBC,UAAU,IAC5DA,UAAU,CAACV,IAAX,CAAgBM,WAAhB,GAA8BK,KAA9B,CAAoC,CAApC,EAAsCJ,WAAtC,MAAuDH,UAD3B,CAAhC;AAGH,CAPD,C,CASA;;;AACA,MAAMQ,kBAAkB,GAAGC,UAAU,IAAIA,UAAU,CAACb,IAApD;;AAEA,MAAMc,gBAAgB,GAAGD,UAAU,iBAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACKA,UAAU,CAACb,IADhB,CADJ;;AAMA,MAAMe,SAAN,SAAwBnB,SAAxB,CAAkC;AAC9BoB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SASnBC,QATmB,GASR,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAyB;AACjC,WAAKC,QAAL,CAAc;AACVlB,QAAAA,KAAK,EAAEiB;AADG,OAAd;AAGF,KAbkB;;AAAA,SAenBE,2BAfmB,GAeW,CAAC;AAAEnB,MAAAA;AAAF,KAAD,KAAe;AACzC,WAAKkB,QAAL,CAAc;AACXE,QAAAA,WAAW,EAAErB,cAAc,CAACC,KAAD;AADhB,OAAd;AAGH,KAnBkB;;AAAA,SAqBnBqB,2BArBmB,GAqBW,MAAM;AAChC,WAAKH,QAAL,CAAc;AACVE,QAAAA,WAAW,EAAE;AADH,OAAd;AAGH,KAzBkB;;AAEf,SAAKE,KAAL,GAAa;AACTtB,MAAAA,KAAK,EAAE,EADE;AAEToB,MAAAA,WAAW,EAAE;AAFJ,KAAb;AAIH,GAP6B,CAS9B;;;AAmBAG,EAAAA,MAAM,GAAE;AACJ,UAAM;AAAEvB,MAAAA,KAAF;AAASoB,MAAAA;AAAT,QAAyB,KAAKE,KAApC;AAEA,UAAME,UAAU,GAAG;AACfC,MAAAA,WAAW,EAAE,0BADE;AAEfzB,MAAAA,KAFe;AAGfe,MAAAA,QAAQ,EAAE,KAAKA;AAHA,KAAnB;AAMA,wBACI,oBAAC,WAAD;AACI,MAAA,WAAW,EAAEK,WADjB;AAEI,MAAA,2BAA2B,EAAE,KAAKD,2BAFtC;AAGI,MAAA,2BAA2B,EAAE,KAAKE,2BAHtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAQH;;AA7C6B;;AAiDlC,eAAeT,SAAf","sourcesContent":["import React, {Component} from 'react';\nimport styled from 'styled-components';\nimport Autosuggest from 'react-autosuggest';\n\nconst datastructures = [\n    {\n        name: \"AVL Tree\",\n        category: \"Tree\",\n    },\n    {\n        name: \"Stack\",\n        category: \"Stack & Queues\",\n    },\n    {\n        name: \"Queue\",\n        category: \"Stack & Queues\",\n    },\n    {\n        name: \"Splay Tree\",\n        category: \"Tree\",\n    },\n    {\n        name: \"Linked List\",\n        category: \"Basics\",\n    },\n    {\n        name: \"Binary Search Tree\",\n        category: \"Tree\",\n    },\n];\n\n// Generate suggestions list based on user input matching to suggestion names.\nconst getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    return inputLength === 0 ? [] : datastructures.filter(datastruct =>\n        datastruct.name.toLowerCase().slice(0,inputLength) === inputValue\n    );\n};\n\n// Retrieve value from suggestion that user has chosen\nconst getSuggestionValue = suggestion => suggestion.name;\n\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion.name}\n    </div>\n);\n\nclass Searchbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: '',\n            suggestions: []\n        };\n    }\n\n    // Update value onChange.\n    onChange = (event, { newValue }) => {\n       this.setState({\n           value: newValue\n       });\n    };\n\n    onSuggestionsFetchRequested = ({ value }) => {\n        this.setState({\n           suggestions: getSuggestions(value)\n        });\n    };\n\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    render(){\n        const { value, suggestions } = this.state;\n\n        const inputProps = {\n            placeholder: 'Type a data structure...',\n            value,\n            onChange: this.onChange\n        };\n\n        return(\n            <Autosuggest\n                suggestions={suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                \n            />\n        )\n    }\n\n}\n\nexport default Searchbar;"]},"metadata":{},"sourceType":"module"}