{"ast":null,"code":"var _jsxFileName = \"/Users/conormccormack/datastructs/src/components/catalog.js\";\nimport React from 'react';\nimport Navbar from './navbar';\nimport queryString from 'query-string';\nimport styled from 'styled-components';\nconst CatalogContainer = styled.div`\n    background-color: #EFE7E2;\n    height: 100vh;\n`;\nconst CatalogHeadline = styled.div`\n    font-family: Ramaraja;\n    font-size: 50px;\n    padding-left: 6rem;\n`;\nconst Results = styled.div`\n    display: grid;\n    padding-left: 6rem;\n    padding-right: 6rem;\n`;\nconst Pages = [{\n  category: \"Trees\",\n  queries: [{\n    name: 'AVL Tree',\n    url: 'tree/avl'\n  }, {\n    name: 'Binary Search Tree',\n    url: 'tree/bst'\n  }, {\n    name: 'Red-Black Tree',\n    url: 'tree/redblack'\n  }, {\n    name: 'Splay Tree',\n    url: 'tree/splay'\n  }]\n}, {\n  category: \"Basics\",\n  queries: [{\n    name: 'Linked List',\n    url: 'linkedlist'\n  }, {\n    name: 'Stack',\n    url: 'stack'\n  }, {\n    name: 'Queue',\n    url: 'queue'\n  }]\n}, {\n  category: \"Sorting Algorithms\",\n  queries: [{\n    name: 'Bubble Sort',\n    url: 'sort/bubble'\n  }, {\n    name: 'Selection Sort',\n    url: 'sort/selection'\n  }, {\n    name: 'Insertion Sort',\n    url: 'sort/insertion'\n  }, {\n    name: 'Merge Sort',\n    url: 'sort/merge'\n  }, {\n    name: 'Quick Sort',\n    url: 'sort/quick'\n  }, {\n    name: 'Radix Sort',\n    url: 'sort/radix'\n  }, {\n    name: 'Heap Sort',\n    url: 'sort/heap'\n  }]\n}, {\n  category: \"Graph Algorithms\",\n  queries: [{\n    name: 'Breadth-First Search',\n    url: 'graph/bfs'\n  }, {\n    name: 'Depth-First Search',\n    url: 'graph/dfs'\n  }, {\n    name: 'Dijkstra\\'s Algorithm',\n    url: 'graph/dijkstras'\n  }, {\n    name: 'Prim\\'s Algorithm',\n    url: 'graph/prims'\n  }, {\n    name: 'Topological Sort',\n    url: 'graph/topological'\n  }, {\n    name: 'Kruskal\\'s Sort',\n    url: 'graph/kruskals'\n  }]\n}];\n\nconst resultsByCategory = (query, filt, db) => {\n  let results = [];\n\n  for (let i = 0; i < db.length; i++) {\n    let res = [];\n    if (filt !== 'all' && db[i].category.toLowerCase() !== filt.toLowerCase()) continue;\n\n    for (let j = 0; j < db[i].queries.length; j++) {\n      if (filt === 'all' || db[i].queries[j].name.toLowerCase().includes(query.toLowerCase())) {\n        res.push(db[i].queries[j]);\n      }\n    }\n\n    if (res.length > 0) results.push({\n      category: db[i].category,\n      results: res\n    });\n  }\n\n  return resultsToHTML(results);\n};\n\nconst resultsToHTML = results => {\n  if (results.length === 0) return 'There are no items matching your search.';else return JSON.stringify(results);\n};\n\nfunction Catalog(props) {\n  const query = queryString.parse(props.location.search);\n  const SearchResults = resultsByCategory(query.term, query.view, Pages);\n  return /*#__PURE__*/React.createElement(CatalogContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }), query.term ? /*#__PURE__*/React.createElement(CatalogHeadline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 27\n    }\n  }, \"Search results for \", query.term, \":\") : /*#__PURE__*/React.createElement(CatalogHeadline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }, \"This is the catalog filtered by \", query.view, \".\"), /*#__PURE__*/React.createElement(Results, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, SearchResults));\n}\n\nexport default Catalog;","map":{"version":3,"sources":["/Users/conormccormack/datastructs/src/components/catalog.js"],"names":["React","Navbar","queryString","styled","CatalogContainer","div","CatalogHeadline","Results","Pages","category","queries","name","url","resultsByCategory","query","filt","db","results","i","length","res","toLowerCase","j","includes","push","resultsToHTML","JSON","stringify","Catalog","props","parse","location","search","SearchResults","term","view"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Navbar from './navbar';\nimport queryString from 'query-string';\nimport styled from 'styled-components';\n\nconst CatalogContainer = styled.div`\n    background-color: #EFE7E2;\n    height: 100vh;\n`\nconst CatalogHeadline = styled.div`\n    font-family: Ramaraja;\n    font-size: 50px;\n    padding-left: 6rem;\n`\n\nconst Results = styled.div`\n    display: grid;\n    padding-left: 6rem;\n    padding-right: 6rem;\n`\n\nconst Pages = [\n    {\n        category: \"Trees\",\n        queries: [\n            {\n                name: 'AVL Tree',\n                url: 'tree/avl'\n            },\n            {\n                name: 'Binary Search Tree',\n                url: 'tree/bst'\n            },\n            {\n                name: 'Red-Black Tree',\n                url: 'tree/redblack'\n            },\n            {\n                name: 'Splay Tree',\n                url: 'tree/splay'\n            },\n        ]\n    },\n    {\n        category: \"Basics\",\n        queries: [\n            {\n                name: 'Linked List',\n                url: 'linkedlist',\n            },\n            {\n                name: 'Stack',\n                url: 'stack',\n            },\n            {\n                name: 'Queue',\n                url: 'queue',\n            },\n        ],\n    },\n    {\n        category: \"Sorting Algorithms\",\n        queries: [\n            {\n                name: 'Bubble Sort',\n                url: 'sort/bubble',\n            },\n            {\n                name: 'Selection Sort',\n                url: 'sort/selection',\n            },\n            {\n                name: 'Insertion Sort',\n                url: 'sort/insertion',\n            },\n            {\n                name: 'Merge Sort',\n                url: 'sort/merge',\n            },\n            {\n                name: 'Quick Sort',\n                url: 'sort/quick',\n            },\n            {\n                name: 'Radix Sort',\n                url: 'sort/radix',\n            },\n            {\n                name: 'Heap Sort',\n                url: 'sort/heap',\n            },\n        ],\n    },\n    {\n        category: \"Graph Algorithms\",\n        queries: [\n            {\n                name: 'Breadth-First Search',\n                url: 'graph/bfs',\n            },\n            {\n                name: 'Depth-First Search',\n                url: 'graph/dfs',\n            },\n            {\n                name: 'Dijkstra\\'s Algorithm',\n                url: 'graph/dijkstras',\n            },\n            {\n                name: 'Prim\\'s Algorithm',\n                url: 'graph/prims',\n            },\n            {\n                name: 'Topological Sort',\n                url: 'graph/topological',\n            },\n            {\n                name: 'Kruskal\\'s Sort',\n                url: 'graph/kruskals',\n            },\n        ]\n    },\n\n];\n\nconst resultsByCategory = (query, filt, db) => {\n    let results = [];\n    for (let i = 0; i < db.length; i++) {\n        let res = [];\n        if (filt !== 'all' && db[i].category.toLowerCase() !== filt.toLowerCase()) continue;\n        for (let j = 0; j < db[i].queries.length; j++) {\n            if (filt === 'all' || db[i].queries[j].name.toLowerCase().includes(query.toLowerCase())){\n                res.push(db[i].queries[j]);\n            }\n        }\n        if (res.length > 0) results.push({category: db[i].category, results: res});\n    }\n    return resultsToHTML(results);\n};\n\nconst resultsToHTML = (results) => {\n    if (results.length === 0) return ('There are no items matching your search.');\n    else return JSON.stringify(results);\n};\n\nfunction Catalog(props){\n    const query = queryString.parse(props.location.search);\n    const SearchResults = resultsByCategory(query.term, query.view, Pages);\n\n    return(\n        <CatalogContainer>\n            <Navbar/>\n            {query.term ? <CatalogHeadline>Search results for {query.term}:</CatalogHeadline> :\n                <CatalogHeadline>This is the catalog filtered by {query.view}.</CatalogHeadline>\n            }\n            <Results>\n                {SearchResults}\n            </Results>\n        </CatalogContainer>\n    )\n}\n\nexport default Catalog;"]},"metadata":{},"sourceType":"module"}