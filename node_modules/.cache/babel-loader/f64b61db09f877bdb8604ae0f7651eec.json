{"ast":null,"code":"var _jsxFileName = \"/Users/conormccormack/datastructs/src/components/searchbar.js\";\nimport React, { PureComponent } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport '../css/autocomplete.css';\nconst dataStructures = [{\n  category: \"Trees\",\n  queries: [{\n    name: 'AVL Tree'\n  }, {\n    name: 'Binary Search Tree'\n  }, {\n    name: 'Red-Black Tree'\n  }, {\n    name: 'Splay Tree'\n  }]\n}, {\n  category: \"Basics\",\n  queries: [{\n    name: 'Linked List'\n  }, {\n    name: 'Stack'\n  }, {\n    name: 'Queue'\n  }]\n}, {\n  category: \"Sorting Algorithms\",\n  queries: [{\n    name: 'Bubble Sort'\n  }, {\n    name: 'Selection Sort'\n  }, {\n    name: 'Insert Sort'\n  }, {\n    name: 'Merge Sort'\n  }, {\n    name: 'Quick Sort'\n  }, {\n    name: 'Radix Sort'\n  }, {\n    name: 'Heap Sort'\n  }]\n}, {\n  category: \"Graph Algorithms\",\n  queries: [{\n    name: 'Breadth-First Search'\n  }, {\n    name: 'Depth-First Search'\n  }, {\n    name: 'Dijkstra\\'s Algorithm'\n  }, {\n    name: 'Prim\\'s Algorithm'\n  }, {\n    name: 'Topological Sort'\n  }, {\n    name: 'Kruskal\\'s Sort'\n  }]\n}]; // Generate suggestions list based on user input matching to suggestion names.\n\nfunction getSuggestions(value) {\n  const inputValue = value.trim().toLowerCase();\n\n  if (inputValue.length === 0) {\n    return [];\n  }\n\n  ;\n  return dataStructures.map(section => {\n    return {\n      category: section.category,\n      queries: section.queries.filter(query => query.name.toLowerCase().includes(inputValue))\n    };\n  }).filter(section => section.queries.length > 0);\n} // Given a suggestion, return the name\n\n\nconst getSuggestionValue = suggestion => suggestion.name; // Given a section, return an array of corresponding queries\n\n\nconst getSectionSuggestions = section => {\n  return section.queries;\n}; // Given a section, render its category name as bold text\n\n\nconst renderSectionTitle = section => /*#__PURE__*/React.createElement(\"strong\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }\n}, section.category); // Given a suggestion (query), render its name\n\n\nconst renderSuggestion = suggestion => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }\n}, suggestion.name);\n\nclass Searchbar extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.onChange = (event, {\n      newValue,\n      method\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  } // Update value on change to input box.\n\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state;\n    const inputProps = {\n      placeholder: 'Search (e.g. \"AVL Tree\")',\n      value,\n      onChange: this.onChange\n    };\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Autosuggest, {\n      multiSection: true,\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      getSectionSuggestions: getSectionSuggestions,\n      renderSuggestion: renderSuggestion,\n      renderSectionTitle: renderSectionTitle,\n      inputProps: inputProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Searchbar;","map":{"version":3,"sources":["/Users/conormccormack/datastructs/src/components/searchbar.js"],"names":["React","PureComponent","Autosuggest","dataStructures","category","queries","name","getSuggestions","value","inputValue","trim","toLowerCase","length","map","section","filter","query","includes","getSuggestionValue","suggestion","getSectionSuggestions","renderSectionTitle","renderSuggestion","Searchbar","constructor","props","onChange","event","newValue","method","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","render","inputProps","placeholder"],"mappings":"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","sourcesContent":["import React, {PureComponent} from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport '../css/autocomplete.css';\n\nconst dataStructures = [\n    {\n        category: \"Trees\",\n        queries: [\n            {\n                name: 'AVL Tree'\n            },\n            {\n                name: 'Binary Search Tree'\n            },\n            {\n                name: 'Red-Black Tree'\n            },\n            {\n                name: 'Splay Tree'\n            },\n        ]\n    },\n    {\n        category: \"Basics\",\n        queries: [\n            {\n                name: 'Linked List'\n            },\n            {\n                name: 'Stack'\n            },\n            {\n                name: 'Queue'\n            },\n        ],\n    },\n    {\n        category: \"Sorting Algorithms\",\n        queries: [\n            {\n                name: 'Bubble Sort'\n            },\n            {\n                name: 'Selection Sort'\n            },\n            {\n                name: 'Insert Sort'\n            },\n            {\n                name: 'Merge Sort'\n            },\n            {\n                name: 'Quick Sort'\n            },\n            {\n                name: 'Radix Sort'\n            },\n            {\n                name: 'Heap Sort'\n            },\n        ],\n    },\n    {\n        category: \"Graph Algorithms\",\n        queries: [\n            {\n                name: 'Breadth-First Search'\n            },\n            {\n                name: 'Depth-First Search'\n            },\n            {\n                name: 'Dijkstra\\'s Algorithm'\n            },\n            {\n                name: 'Prim\\'s Algorithm'\n            },\n            {\n                name: 'Topological Sort'\n            },\n            {\n                name: 'Kruskal\\'s Sort'\n            },\n        ]\n    },\n\n];\n\n// Generate suggestions list based on user input matching to suggestion names.\nfunction getSuggestions(value) {\n    const inputValue = value.trim().toLowerCase();\n    if (inputValue.length === 0) {\n        return []\n    };\n\n    return dataStructures\n        .map(section => {\n            return {\n                category: section.category,\n                queries: section.queries.filter(query => query.name.toLowerCase().includes(inputValue))\n            };\n        })\n        .filter(section => section.queries.length > 0)\n\n}\n\n// Given a suggestion, return the name\nconst getSuggestionValue = suggestion => suggestion.name;\n\n// Given a section, return an array of corresponding queries\nconst getSectionSuggestions = section => {\n    return section.queries;\n};\n\n// Given a section, render its category name as bold text\nconst renderSectionTitle = section => (\n    <strong>\n        {section.category}\n    </strong>\n);\n\n// Given a suggestion (query), render its name\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion.name}\n    </div>\n);\n\nclass Searchbar extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: '',\n            suggestions: []\n        };\n    }\n\n    // Update value on change to input box.\n    onChange = (event, { newValue, method }) => {\n       this.setState({\n           value: newValue\n       });\n    };\n\n    // Repopulate suggestions whenever requested.\n    onSuggestionsFetchRequested = ({ value }) => {\n        this.setState({\n           suggestions: getSuggestions(value)\n        });\n    };\n\n    // Clean up function\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    render(){\n        const { value, suggestions } = this.state;\n\n        const inputProps = {\n            placeholder: 'Search (e.g. \"AVL Tree\")',\n            value,\n            onChange: this.onChange\n        };\n\n        return(\n            <form onSubmit >\n                <Autosuggest\n                    multiSection={true}\n                    suggestions={suggestions}\n                    onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                    onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                    getSuggestionValue={getSuggestionValue}\n                    getSectionSuggestions={getSectionSuggestions}\n                    renderSuggestion={renderSuggestion}\n                    renderSectionTitle={renderSectionTitle}\n                    inputProps={inputProps}\n                />\n            </form>\n        );\n    }\n\n}\n\nexport default Searchbar;"]},"metadata":{},"sourceType":"module"}