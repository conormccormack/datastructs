{"ast":null,"code":"var _jsxFileName = \"/Users/conormccormack/datastructs/src/components/binarytree.js\";\nimport React, { useEffect, useState } from 'react';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport styled from 'styled-components';\nconst Flex = styled.div`\n    display: flex;\n`;\nconst FillWidth = styled.div`\n    width: 100%;\n    height: 100%;\n`; // Build and maintain state as array.\n// Each element in array represents a level on the tree.\n\nfunction BinaryTree(props) {\n  const [tree, setTree] = useState(props.BST); // Return level on tree given id\n\n  const computeLevel = id => Math.floor(Math.log2(id + 1)); // Compute left-right zero based index of id on its level in the tree.\n\n\n  const computeIndexOnLevel = (id, level) => id + 1 - Math.pow(2, level);\n\n  console.log(props.BST);\n  return /*#__PURE__*/React.createElement(motion.div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, JSON.stringify(props.BST), /*#__PURE__*/React.createElement(AnimatePresence, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, JSON.stringify(props.BST)));\n}\n\nexport default BinaryTree;","map":{"version":3,"sources":["/Users/conormccormack/datastructs/src/components/binarytree.js"],"names":["React","useEffect","useState","AnimatePresence","motion","styled","Flex","div","FillWidth","BinaryTree","props","tree","setTree","BST","computeLevel","id","Math","floor","log2","computeIndexOnLevel","level","pow","console","log","JSON","stringify"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,eAAR,EAAyBC,MAAzB,QAAsC,eAAtC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,IAAI,GAAGD,MAAM,CAACE,GAAI;;CAAxB;AAIA,MAAMC,SAAS,GAAGH,MAAM,CAACE,GAAI;;;CAA7B,C,CAKA;AACA;;AAEA,SAASE,UAAT,CAAqBC,KAArB,EAA2B;AACvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAACQ,KAAK,CAACG,GAAP,CAAhC,CADuB,CAEvB;;AACA,QAAMC,YAAY,GAAGC,EAAE,IAAKC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,IAAL,CAAUH,EAAE,GAAG,CAAf,CAAX,CAA5B,CAHuB,CAIvB;;;AACA,QAAMI,mBAAmB,GAAG,CAACJ,EAAD,EAAKK,KAAL,KAAgBL,EAAE,GAAG,CAAL,GAASC,IAAI,CAACK,GAAL,CAAS,CAAT,EAAWD,KAAX,CAArD;;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAYb,KAAK,CAACG,GAAlB;AAEA,sBACI,oBAAC,MAAD,CAAQ,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKW,IAAI,CAACC,SAAL,CAAef,KAAK,CAACG,GAArB,CADL,eAEI,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCW,IAAI,CAACC,SAAL,CAAef,KAAK,CAACG,GAArB,CADD,CAFJ,CADJ;AASH;;AAED,eAAeJ,UAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {AnimatePresence, motion} from 'framer-motion';\nimport styled from 'styled-components';\n\nconst Flex = styled.div`\n    display: flex;\n`\n\nconst FillWidth = styled.div`\n    width: 100%;\n    height: 100%;\n`\n\n// Build and maintain state as array.\n// Each element in array represents a level on the tree.\n\nfunction BinaryTree (props){\n    const [tree, setTree] = useState(props.BST);\n    // Return level on tree given id\n    const computeLevel = id => (Math.floor(Math.log2(id + 1)));\n    // Compute left-right zero based index of id on its level in the tree.\n    const computeIndexOnLevel = (id, level) => (id + 1 - Math.pow(2,level));\n\n    console.log(props.BST);\n\n    return(\n        <motion.div>\n            {JSON.stringify(props.BST)}\n            <AnimatePresence>\n            {JSON.stringify(props.BST)}\n            </AnimatePresence>\n        </motion.div>\n    )\n\n}\n\nexport default BinaryTree;"]},"metadata":{},"sourceType":"module"}