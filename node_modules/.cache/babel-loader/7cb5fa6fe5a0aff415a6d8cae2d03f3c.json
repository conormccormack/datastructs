{"ast":null,"code":"var _jsxFileName = \"/Users/conormccormack/datastructs/src/components/searchbar.js\";\nimport React, { PureComponent } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport '../css/autocomplete.css';\nconst datastructures = [{\n  category: \"Trees\",\n  suggestions: [{\n    name: 'AVL Tree'\n  }, {\n    name: 'Binary Search Tree'\n  }, {\n    name: 'Red-Black Tree'\n  }, {\n    name: 'Splay Tree'\n  }]\n}, {\n  category: \"Basics\",\n  suggestions: [{\n    name: 'Linked List'\n  }, {\n    name: 'Stack'\n  }, {\n    name: 'Queue'\n  }]\n}, {\n  category: \"Sorting Algorithms\",\n  suggestions: [{\n    name: 'Bubble Sort'\n  }, {\n    name: 'Selection Sort'\n  }, {\n    name: 'Insert Sort'\n  }, {\n    name: 'Merge Sort'\n  }, {\n    name: 'Quick Sort'\n  }, {\n    name: 'Shell Sort'\n  }, {\n    name: 'Radix Sort'\n  }, {\n    name: 'Heap Sort'\n  }]\n}, {\n  category: \"Graph Algorithms\",\n  suggestions: [{\n    name: 'Breadth-First Search'\n  }, {\n    name: 'Depth-First Search'\n  }, {\n    name: 'Dijkstra\\'s Algorithm'\n  }, {\n    name: 'Prim\\'s Algorithm'\n  }, {\n    name: 'Topological Sort'\n  }, {\n    name: 'Kruskal\\'s Sort'\n  }]\n}]; // Generate suggestions list based on user input matching to suggestion names.\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  return inputLength === 0 ? [] : datastructures.filter(datastruct => datastruct.name.toLowerCase().includes(inputValue));\n}; // Retrieve value from suggestion that user has chosen\n\n\nconst getSuggestionValue = suggestion => suggestion.name;\n\nconst getSectionSuggestions = () => {\n  return 'a';\n};\n\nconst renderSectionTitle = section => {\n  /*#__PURE__*/\n  React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, section.title);\n};\n\nconst renderSuggestion = suggestion => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }\n}, suggestion.name);\n\nclass Searchbar extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  } // Update value onChange.\n\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state;\n    const inputProps = {\n      placeholder: '\"AVL Trees\"',\n      value,\n      onChange: this.onChange\n    };\n    return /*#__PURE__*/React.createElement(Autosuggest, {\n      multiSection: true,\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSectionTitle: renderSectionTitle,\n      getSectionSuggestiosn: getSectionSuggestions,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default Searchbar;","map":{"version":3,"sources":["/Users/conormccormack/datastructs/src/components/searchbar.js"],"names":["React","PureComponent","Autosuggest","datastructures","category","suggestions","name","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","datastruct","includes","getSuggestionValue","suggestion","getSectionSuggestions","renderSectionTitle","section","title","renderSuggestion","Searchbar","constructor","props","onChange","event","newValue","setState","onSuggestionsFetchRequested","onSuggestionsClearRequested","state","render","inputProps","placeholder"],"mappings":"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","sourcesContent":["import React, {PureComponent} from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport '../css/autocomplete.css';\n\nconst datastructures = [\n    {\n        category: \"Trees\",\n        suggestions: [\n            {\n                name: 'AVL Tree'\n            },\n            {\n                name: 'Binary Search Tree'\n            },\n            {\n                name: 'Red-Black Tree'\n            },\n            {\n                name: 'Splay Tree'\n            },\n        ]\n    },\n    {\n        category: \"Basics\",\n        suggestions: [\n            {\n                name: 'Linked List'\n            },\n            {\n                name: 'Stack'\n            },\n            {\n                name: 'Queue'\n            },\n        ]\n    },\n    {\n        category: \"Sorting Algorithms\",\n        suggestions: [\n            {\n                name: 'Bubble Sort'\n            },\n            {\n                name: 'Selection Sort'\n            },\n            {\n                name: 'Insert Sort'\n            },\n            {\n                name: 'Merge Sort'\n            },\n            {\n                name: 'Quick Sort'\n            },\n            {\n                name: 'Shell Sort'\n            },\n            {\n                name: 'Radix Sort'\n            },\n            {\n                name: 'Heap Sort'\n            }\n\n        ]\n    },\n    {\n        category: \"Graph Algorithms\",\n        suggestions: [\n            {\n                name: 'Breadth-First Search'\n            },\n            {\n                name: 'Depth-First Search'\n            },\n            {\n                name: 'Dijkstra\\'s Algorithm'\n            },\n            {\n                name: 'Prim\\'s Algorithm'\n            },\n            {\n                name: 'Topological Sort'\n            },\n            {\n                name: 'Kruskal\\'s Sort'\n            },\n        ]\n    },\n\n];\n\n// Generate suggestions list based on user input matching to suggestion names.\nconst getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    return inputLength === 0 ? [] : datastructures.filter(datastruct =>\n        datastruct.name.toLowerCase().includes(inputValue)\n    );\n};\n\n// Retrieve value from suggestion that user has chosen\nconst getSuggestionValue = suggestion => suggestion.name;\n\nconst getSectionSuggestions = () => {\n    return 'a';\n};\n\nconst renderSectionTitle = section => {\n    <div>\n        {section.title}\n    </div>\n};\n\n\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion.name}\n    </div>\n);\n\nclass Searchbar extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: '',\n            suggestions: []\n        };\n    }\n\n    // Update value onChange.\n    onChange = (event, { newValue }) => {\n       this.setState({\n           value: newValue\n       });\n    };\n\n    onSuggestionsFetchRequested = ({ value }) => {\n        this.setState({\n           suggestions: getSuggestions(value)\n        });\n    };\n\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    render(){\n        const { value, suggestions } = this.state;\n\n        const inputProps = {\n            placeholder: '\"AVL Trees\"',\n            value,\n            onChange: this.onChange\n        };\n\n        return(\n            <Autosuggest\n                multiSection={true}\n                suggestions={suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSectionTitle={renderSectionTitle}\n                getSectionSuggestiosn={getSectionSuggestions}\n                renderSuggestion={renderSuggestion}\n                inputProps={inputProps}\n            />\n        );\n    }\n\n}\n\nexport default Searchbar;"]},"metadata":{},"sourceType":"module"}