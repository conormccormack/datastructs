{"ast":null,"code":"var _jsxFileName = \"/Users/conormccormack/datastructs/src/components/testanimation.js\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport Navbar from \"./navbar\";\nconst TestSandbox = styled.div`\n    height: 100vh;\n    background-color: #EFE7E2;\n    grid-template-columns: 1fr 1fr;\n    display: grid;\n`;\nconst ListWrapper = styled.div`\n    height: 200px; \n    width: 100px;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 20px;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n`;\nconst DisplayNode = styled.div`\n    background-color: #D8BBFF; \n    border-radius: 50%;\n    margin: 20px;\n    height: 100px; \n    width: 100px;\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\nconst NodeContent = styled.div`\n    text-align: center;\n    vertical-align: middle;\n    font-size: 30px;\n    font-family: Helvetica;\n    color: #FFF;\n`;\nconst Margin20 = styled.div`\n    margin: 20px;\n`; // class Node {\n//     constructor(data, left = null, right = null) {\n//         this.data = data;\n//         this.leftChild = left;\n//         this.rightChild = right;\n//     }\n// }\n// const TemplateTree = [\n//     {\n//         data: 10,\n//         left: {\n//             data: 2,\n//             left: null,\n//             right: null,\n//         },\n//         right: {\n//             data: 12,\n//             left: null,\n//             right: null,\n//         },\n//     }\n// ];\n\nfunction TestAnimation() {\n  const [numberNodes, setNumberNodes] = useState(0);\n  const [inputValue, setInputValue] = useState([]); // const [tree, setTree] = useState({});\n\n  const [tree, setTree] = useState({\n    data: 10,\n    left: {\n      data: 8,\n      left: {\n        data: 5,\n        left: null,\n        right: null\n      },\n      right: {\n        data: 9,\n        left: null,\n        right: null\n      }\n    },\n    right: {\n      data: 16,\n      left: {\n        data: 12,\n        left: null,\n        right: null\n      },\n      right: {\n        data: 18,\n        left: null,\n        right: null\n      }\n    }\n  });\n\n  const insertNode = tree => {\n    let newTree = tree;\n    console.log(newTree);\n\n    if (inputValue >= newTree.data) {\n      // Base case: create leaf node.\n      if (newTree.right == null) {\n        newTree.right = {\n          data: inputValue,\n          left: null,\n          right: null\n        };\n        return newTree;\n      } else {\n        return insertNode(newTree.right);\n      }\n    } else {\n      // Base case: create leaf node.\n      if (newTree.left == null) {\n        newTree.left = {\n          data: inputValue,\n          left: null,\n          right: null\n        };\n        return newTree;\n      } else {\n        return insertNode(newTree.right);\n      }\n    }\n  };\n\n  const onInsertDown = event => {\n    event.preventDefault();\n\n    if (Object.keys(tree).length === 0) {\n      setTree({\n        data: inputValue,\n        left: null,\n        right: null\n      });\n    } else {\n      setTree(insertNode(tree));\n    }\n\n    setNumberNodes(numberNodes => numberNodes + 1);\n  };\n\n  const handleChange = event => setInputValue(event.target.value);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TestSandbox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ListWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Margin20, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 21\n    }\n  }, Object.keys(tree).length > 0 && BinaryTree(tree))), /*#__PURE__*/React.createElement(\"form\", {\n    style: {\n      paddingLeft: '100px'\n    },\n    onSubmit: onInsertDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: inputValue,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 25\n    }\n  }), \" Input\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 21\n    }\n  }, \"Number of Nodes: \", numberNodes))));\n} // Recursion\n\n\nfunction BinaryTree(tree) {\n  console.log(tree.left);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Margin20, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(motion.div, {\n    initial: {\n      scale: 0\n    },\n    animate: {\n      scale: 1\n    },\n    whileHover: {\n      scale: 1.5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(DisplayNode, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(NodeContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 29\n    }\n  }, tree.data)))), tree.left && BinaryTree(tree.left), tree.right && BinaryTree(tree.right)));\n}\n\nexport default TestAnimation;","map":{"version":3,"sources":["/Users/conormccormack/datastructs/src/components/testanimation.js"],"names":["React","useEffect","useState","styled","motion","Navbar","TestSandbox","div","ListWrapper","DisplayNode","NodeContent","Margin20","TestAnimation","numberNodes","setNumberNodes","inputValue","setInputValue","tree","setTree","data","left","right","insertNode","newTree","console","log","onInsertDown","event","preventDefault","Object","keys","length","handleChange","target","value","BinaryTree","paddingLeft","scale"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport Navbar from \"./navbar\";\n\nconst TestSandbox = styled.div`\n    height: 100vh;\n    background-color: #EFE7E2;\n    grid-template-columns: 1fr 1fr;\n    display: grid;\n`\n\nconst ListWrapper = styled.div`\n    height: 200px; \n    width: 100px;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 20px;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n`\n\nconst DisplayNode = styled.div`\n    background-color: #D8BBFF; \n    border-radius: 50%;\n    margin: 20px;\n    height: 100px; \n    width: 100px;\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst NodeContent = styled.div`\n    text-align: center;\n    vertical-align: middle;\n    font-size: 30px;\n    font-family: Helvetica;\n    color: #FFF;\n`\n\nconst Margin20 = styled.div`\n    margin: 20px;\n`\n\n\n// class Node {\n//     constructor(data, left = null, right = null) {\n//         this.data = data;\n//         this.leftChild = left;\n//         this.rightChild = right;\n//     }\n// }\n\n// const TemplateTree = [\n//     {\n//         data: 10,\n//         left: {\n//             data: 2,\n//             left: null,\n//             right: null,\n//         },\n//         right: {\n//             data: 12,\n//             left: null,\n//             right: null,\n//         },\n//     }\n// ];\n\n\nfunction TestAnimation(){\n    const [numberNodes, setNumberNodes] = useState(0);\n    const [inputValue, setInputValue ] = useState([]);\n    // const [tree, setTree] = useState({});\n    const [tree, setTree] = useState(\n        {\n            data: 10,\n            left: {\n                data: 8,\n                left: {\n                    data: 5,\n                    left: null,\n                    right: null,\n                },\n                right: {\n                    data: 9,\n                    left: null,\n                    right: null,\n                },\n            },\n            right: {\n                data: 16,\n                left: {\n                    data: 12,\n                    left: null,\n                    right: null,\n                },\n                right: {\n                    data: 18,\n                    left: null,\n                    right: null,\n                },\n            }\n        }\n    );\n\n    const insertNode = (tree) => {\n        let newTree = tree;\n        console.log(newTree);\n        if (inputValue >= newTree.data){\n            // Base case: create leaf node.\n            if (newTree.right == null){\n                newTree.right = {\n                    data: inputValue,\n                    left: null,\n                    right: null,\n                };\n                return newTree;\n            }\n            else {\n                return insertNode(newTree.right);\n            }\n        } else {\n            // Base case: create leaf node.\n            if (newTree.left == null){\n                newTree.left = {\n                    data: inputValue,\n                    left: null,\n                    right: null,\n                };\n                return newTree;\n            } else {\n                return insertNode(newTree.right);\n            }\n        }\n    };\n\n    const onInsertDown = event => {\n        event.preventDefault();\n        if (Object.keys(tree).length === 0){\n            setTree(\n                {\n                    data: inputValue,\n                    left: null,\n                    right: null,\n                }\n            )\n        } else {\n            setTree(insertNode(tree));\n        }\n\n        setNumberNodes(numberNodes => numberNodes + 1);\n    };\n\n    const handleChange = event => setInputValue(event.target.value);\n\n    return (\n        <div>\n            <Navbar/>\n            <TestSandbox>\n                <ListWrapper>\n                    <Margin20>\n                        { Object.keys(tree).length > 0 &&  BinaryTree(tree)}\n                    </Margin20>\n                </ListWrapper>\n                <form style={{paddingLeft:'100px'}} onSubmit={onInsertDown}>\n                    <label>\n                        <input type='text' value={inputValue} onChange={handleChange}></input> Input\n                    </label>\n                    <p>Number of Nodes: {numberNodes}</p>\n                </form>\n            </TestSandbox>\n        </div>\n    )\n}\n\n// Recursion\nfunction BinaryTree (tree) {\n    console.log(tree.left);\n    return(\n        <div>\n            <ul>\n                <Margin20>\n                    <motion.div initial={{scale: 0}} animate={{scale: 1}} whileHover={{scale: 1.5}}>\n                        <DisplayNode>\n                            <NodeContent>{tree.data}</NodeContent>\n                        </DisplayNode>\n                    </motion.div>\n                </Margin20>\n                { tree.left && BinaryTree(tree.left) }\n                { tree.right && BinaryTree(tree.right) }\n            </ul>\n        </div>\n    )\n}\n\nexport default TestAnimation;"]},"metadata":{},"sourceType":"module"}