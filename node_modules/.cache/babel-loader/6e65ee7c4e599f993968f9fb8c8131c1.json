{"ast":null,"code":"var _jsxFileName = \"/Users/conormccormack/datastructs/src/components/searchbar.js\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Autosuggest from 'react-autosuggest';\nconst datastructures = [{\n  name: \"AVL Tree\",\n  category: \"Tree\"\n}, {\n  name: \"Stack\",\n  category: \"Stack & Queues\"\n}, {\n  name: \"Queue\",\n  category: \"Stack & Queues\"\n}, {\n  name: \"Splay Tree\",\n  category: \"Tree\"\n}, {\n  name: \"Linked List\",\n  category: \"Basics\"\n}, {\n  name: \"Binary Search Tree\",\n  category: \"Tree\"\n}]; // Generate suggestions list based on user input matching to suggestion names.\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  return inputLength === 0 ? [] : datastructures.filter(datastruct => datastruct.name.toLowerCase().slice(0, inputLength) === inputValue);\n}; // Retrieve value from suggestion that user has chosen\n\n\nconst getSuggestionValue = suggestion => suggestion.name;\n\nconst renderSuggestion = suggestion => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }\n}, suggestion.name);\n\nfunction SearchBar() {\n  const [suggestions, setSuggestions] = useState([]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  });\n}\n\nexport default SearchBar;","map":{"version":3,"sources":["/Users/conormccormack/datastructs/src/components/searchbar.js"],"names":["React","useState","styled","Autosuggest","datastructures","name","category","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","datastruct","slice","getSuggestionValue","suggestion","renderSuggestion","SearchBar","suggestions","setSuggestions"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AAEA,MAAMC,cAAc,GAAG,CACnB;AACIC,EAAAA,IAAI,EAAE,UADV;AAEIC,EAAAA,QAAQ,EAAE;AAFd,CADmB,EAKnB;AACID,EAAAA,IAAI,EAAE,OADV;AAEIC,EAAAA,QAAQ,EAAE;AAFd,CALmB,EASnB;AACID,EAAAA,IAAI,EAAE,OADV;AAEIC,EAAAA,QAAQ,EAAE;AAFd,CATmB,EAanB;AACID,EAAAA,IAAI,EAAE,YADV;AAEIC,EAAAA,QAAQ,EAAE;AAFd,CAbmB,EAiBnB;AACID,EAAAA,IAAI,EAAE,aADV;AAEIC,EAAAA,QAAQ,EAAE;AAFd,CAjBmB,EAqBnB;AACID,EAAAA,IAAI,EAAE,oBADV;AAEIC,EAAAA,QAAQ,EAAE;AAFd,CArBmB,CAAvB,C,CA2BA;;AACA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAC5B,QAAMC,UAAU,GAAGD,KAAK,CAACE,IAAN,GAAaC,WAAb,EAAnB;AACA,QAAMC,WAAW,GAAGH,UAAU,CAACI,MAA/B;AAEA,SAAOD,WAAW,KAAK,CAAhB,GAAoB,EAApB,GAAyBR,cAAc,CAACU,MAAf,CAAsBC,UAAU,IAC5DA,UAAU,CAACV,IAAX,CAAgBM,WAAhB,GAA8BK,KAA9B,CAAoC,CAApC,EAAsCJ,WAAtC,MAAuDH,UAD3B,CAAhC;AAGH,CAPD,C,CASA;;;AACA,MAAMQ,kBAAkB,GAAGC,UAAU,IAAIA,UAAU,CAACb,IAApD;;AAEA,MAAMc,gBAAgB,GAAGD,UAAU,iBAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACKA,UAAU,CAACb,IADhB,CADJ;;AAQA,SAASe,SAAT,GAAoB;AAChB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCrB,QAAQ,CAAC,EAAD,CAA9C;AAGA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAIH;;AAED,eAAemB,SAAf","sourcesContent":["import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport Autosuggest from 'react-autosuggest';\n\nconst datastructures = [\n    {\n        name: \"AVL Tree\",\n        category: \"Tree\",\n    },\n    {\n        name: \"Stack\",\n        category: \"Stack & Queues\",\n    },\n    {\n        name: \"Queue\",\n        category: \"Stack & Queues\",\n    },\n    {\n        name: \"Splay Tree\",\n        category: \"Tree\",\n    },\n    {\n        name: \"Linked List\",\n        category: \"Basics\",\n    },\n    {\n        name: \"Binary Search Tree\",\n        category: \"Tree\",\n    },\n];\n\n// Generate suggestions list based on user input matching to suggestion names.\nconst getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    return inputLength === 0 ? [] : datastructures.filter(datastruct =>\n        datastruct.name.toLowerCase().slice(0,inputLength) === inputValue\n    );\n};\n\n// Retrieve value from suggestion that user has chosen\nconst getSuggestionValue = suggestion => suggestion.name;\n\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion.name}\n    </div>\n);\n\n\n\nfunction SearchBar(){\n    const [suggestions, setSuggestions] = useState([]);\n\n\n    return (\n        <div></div>\n    )\n\n}\n\nexport default SearchBar;"]},"metadata":{},"sourceType":"module"}