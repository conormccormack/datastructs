{"ast":null,"code":"var _jsxFileName = \"/Users/conormccormack/datastructs/src/components/testanimation.js\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport Navbar from \"./navbar\";\nconst TestSandbox = styled.div`\n    height: 100vh;\n    background-color: #EFE7E2;\n    grid-template-columns: 1fr 1fr;\n    display: grid;\n`;\nconst ListWrapper = styled.div`\n    height: 200px; \n    width: 100px;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 20px;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n`;\nconst DisplayNode = styled.div`\n    background-color: #D8BBFF; \n    border-radius: 50%;\n    margin: 20px;\n    height: 100px; \n    width: 100px;\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\nconst NodeContent = styled.div`\n    text-align: center;\n    vertical-align: middle;\n    font-size: 30px;\n    font-family: Helvetica;\n    color: #FFF;\n`;\nconst Margin20 = styled.div`\n    margin: 20px;\n`; // class Node {\n//     constructor(data, left = null, right = null) {\n//         this.data = data;\n//         this.leftChild = left;\n//         this.rightChild = right;\n//     }\n// }\n// const TemplateTree = [\n//     {\n//         data: 10,\n//         left: {\n//             data: 2,\n//             left: null,\n//             right: null,\n//         },\n//         right: {\n//             data: 12,\n//             left: null,\n//             right: null,\n//         },\n//     }\n// ];\n\nfunction TestAnimation() {\n  const [numberNodes, setNumberNodes] = useState(0);\n  const [inputValue, setInputValue] = useState('');\n  const [tree, setTree] = useState({}); // const [tree, setTree] = useState(\n  //     {\n  //         data: 10,\n  //         left: {\n  //             data: 8,\n  //             left: {\n  //                 data: 5,\n  //                 left: null,\n  //                 right: null,\n  //             },\n  //             right: {\n  //                 data: 9,\n  //                 left: null,\n  //                 right: null,\n  //             },\n  //         },\n  //         right: {\n  //             data: 16,\n  //             left: {\n  //                 data: 12,\n  //                 left: null,\n  //                 right: null,\n  //             },\n  //             right: {\n  //                 data: 18,\n  //                 left: null,\n  //                 right: null,\n  //             },\n  //         }\n  //     }\n  // );\n\n  class Node {} // class BinarySearchTree {\n  //\n  //     insert(data) {\n  //         const newNode = new Node(data);\n  //         this.insertNodeToTree(this.root, newNode);\n  //     }\n  //\n  //     insertNodeToTree(node, newNode){\n  //         if (newNode.data < node.data){\n  //             if (node.left == null) node.left = newNode;\n  //             else this.insertNodeToTree(node.left, newNode);\n  //         } else {\n  //             if (node.right == null) node.right = newNode;\n  //             else this.insertNodeToTree(node.right, newNode);\n  //         }\n  //     }\n  //\n  //     constructor(tree){\n  //         this.data = tree.data;\n  //         if (tree.left != null) this.insertNodeToTree({ data: tree.data, left:  }, tree.left);\n  //         if (tree.right != null) this.insertNodeToTree(this.data, tree.right);\n  //         console.log(tree);\n  //     }\n  //\n  // }\n  //               0\n  //          1           2\n  //       3     4      5      6\n  //    7   8  9  10  11  12  13  14\n  //\n  //                  0\n  //            1\n  //         3     4\n  //       7   8  9 10\n  //\n  //                  1\n  //             3         4\n  //          7    8     9   10\n  //\n  //  find left child:  2n + 1\n  //  find right child: 2n + 2\n  //  find parent:      n-1 / 2\n\n\n  const insertNode = () => {\n    if (Object.keys(tree).length === 0) {\n      setTree({\n        data: inputValue,\n        left: null,\n        right: null\n      });\n    } else {} // let newTree = new BinarySearchTree(tree);\n    // newTree.insert(inputValue);\n    // setTree(newTree);\n    // let newTree = tree;\n    // console.log(newTree);\n    // if (inputValue >= newTree.data){\n    //     // Base case: create leaf node.\n    //     if (newTree.right == null){\n    //         newTree.right = {\n    //             data: inputValue,\n    //             left: null,\n    //             right: null,\n    //         };\n    //         return newTree;\n    //     }\n    //     else {\n    //         return insertNode(newTree.right);\n    //     }\n    // } else {\n    //     // Base case: create leaf node.\n    //     if (newTree.left == null){\n    //         newTree.left = {\n    //             data: inputValue,\n    //             left: null,\n    //             right: null,\n    //         };\n    //         return newTree;\n    //     } else {\n    //         return insertNode(newTree.right);\n    //     }\n    // }\n\n  };\n\n  const onInsertDown = event => {\n    event.preventDefault();\n    insertNode();\n    setNumberNodes(numberNodes => numberNodes + 1);\n  };\n\n  const handleChange = event => setInputValue(parseInt(event.target.value));\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TestSandbox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ListWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Margin20, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 21\n    }\n  }, Object.keys(tree).length > 0 && BinaryTree(tree))), /*#__PURE__*/React.createElement(\"form\", {\n    style: {\n      paddingLeft: '100px'\n    },\n    onSubmit: onInsertDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: inputValue,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 25\n    }\n  }), \" Input\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 21\n    }\n  }, \"Number of Nodes: \", numberNodes))));\n} // Recursion\n\n\nfunction BinaryTree(tree) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Margin20, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(motion.div, {\n    initial: {\n      scale: 0\n    },\n    animate: {\n      scale: 1\n    },\n    whileHover: {\n      scale: 1.5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(DisplayNode, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(NodeContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 29\n    }\n  }, tree.data)))), tree.left && BinaryTree(tree.left), tree.right && BinaryTree(tree.right)));\n}\n\nexport default TestAnimation;","map":{"version":3,"sources":["/Users/conormccormack/datastructs/src/components/testanimation.js"],"names":["React","useEffect","useState","styled","motion","Navbar","TestSandbox","div","ListWrapper","DisplayNode","NodeContent","Margin20","TestAnimation","numberNodes","setNumberNodes","inputValue","setInputValue","tree","setTree","Node","insertNode","Object","keys","length","data","left","right","onInsertDown","event","preventDefault","handleChange","parseInt","target","value","BinaryTree","paddingLeft","scale"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport Navbar from \"./navbar\";\n\nconst TestSandbox = styled.div`\n    height: 100vh;\n    background-color: #EFE7E2;\n    grid-template-columns: 1fr 1fr;\n    display: grid;\n`\n\nconst ListWrapper = styled.div`\n    height: 200px; \n    width: 100px;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 20px;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n`\n\nconst DisplayNode = styled.div`\n    background-color: #D8BBFF; \n    border-radius: 50%;\n    margin: 20px;\n    height: 100px; \n    width: 100px;\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst NodeContent = styled.div`\n    text-align: center;\n    vertical-align: middle;\n    font-size: 30px;\n    font-family: Helvetica;\n    color: #FFF;\n`\n\nconst Margin20 = styled.div`\n    margin: 20px;\n`\n\n\n// class Node {\n//     constructor(data, left = null, right = null) {\n//         this.data = data;\n//         this.leftChild = left;\n//         this.rightChild = right;\n//     }\n// }\n\n// const TemplateTree = [\n//     {\n//         data: 10,\n//         left: {\n//             data: 2,\n//             left: null,\n//             right: null,\n//         },\n//         right: {\n//             data: 12,\n//             left: null,\n//             right: null,\n//         },\n//     }\n// ];\n\n\nfunction TestAnimation(){\n    const [numberNodes, setNumberNodes] = useState(0);\n    const [inputValue, setInputValue ] = useState('');\n    const [tree, setTree] = useState({});\n    // const [tree, setTree] = useState(\n    //     {\n    //         data: 10,\n    //         left: {\n    //             data: 8,\n    //             left: {\n    //                 data: 5,\n    //                 left: null,\n    //                 right: null,\n    //             },\n    //             right: {\n    //                 data: 9,\n    //                 left: null,\n    //                 right: null,\n    //             },\n    //         },\n    //         right: {\n    //             data: 16,\n    //             left: {\n    //                 data: 12,\n    //                 left: null,\n    //                 right: null,\n    //             },\n    //             right: {\n    //                 data: 18,\n    //                 left: null,\n    //                 right: null,\n    //             },\n    //         }\n    //     }\n    // );\n\n\n    class Node {\n\n    }\n\n\n    // class BinarySearchTree {\n    //\n    //     insert(data) {\n    //         const newNode = new Node(data);\n    //         this.insertNodeToTree(this.root, newNode);\n    //     }\n    //\n    //     insertNodeToTree(node, newNode){\n    //         if (newNode.data < node.data){\n    //             if (node.left == null) node.left = newNode;\n    //             else this.insertNodeToTree(node.left, newNode);\n    //         } else {\n    //             if (node.right == null) node.right = newNode;\n    //             else this.insertNodeToTree(node.right, newNode);\n    //         }\n    //     }\n    //\n    //     constructor(tree){\n    //         this.data = tree.data;\n    //         if (tree.left != null) this.insertNodeToTree({ data: tree.data, left:  }, tree.left);\n    //         if (tree.right != null) this.insertNodeToTree(this.data, tree.right);\n    //         console.log(tree);\n    //     }\n    //\n    // }\n\n    //               0\n    //          1           2\n    //       3     4      5      6\n    //    7   8  9  10  11  12  13  14\n    //\n    //                  0\n    //            1\n    //         3     4\n    //       7   8  9 10\n    //\n    //                  1\n    //             3         4\n    //          7    8     9   10\n    //\n    //  find left child:  2n + 1\n    //  find right child: 2n + 2\n    //  find parent:      n-1 / 2\n\n\n\n    const insertNode = () => {\n        if (Object.keys(tree).length === 0){\n            setTree({ data: inputValue, left: null, right: null });\n        } else {\n\n        }\n\n\n        // let newTree = new BinarySearchTree(tree);\n        // newTree.insert(inputValue);\n        // setTree(newTree);\n\n        // let newTree = tree;\n        // console.log(newTree);\n        // if (inputValue >= newTree.data){\n        //     // Base case: create leaf node.\n        //     if (newTree.right == null){\n        //         newTree.right = {\n        //             data: inputValue,\n        //             left: null,\n        //             right: null,\n        //         };\n        //         return newTree;\n        //     }\n        //     else {\n        //         return insertNode(newTree.right);\n        //     }\n        // } else {\n        //     // Base case: create leaf node.\n        //     if (newTree.left == null){\n        //         newTree.left = {\n        //             data: inputValue,\n        //             left: null,\n        //             right: null,\n        //         };\n        //         return newTree;\n        //     } else {\n        //         return insertNode(newTree.right);\n        //     }\n        // }\n    };\n\n\n    const onInsertDown = event => {\n        event.preventDefault();\n        insertNode();\n        setNumberNodes(numberNodes => numberNodes + 1);\n    };\n\n    const handleChange = event => setInputValue(parseInt(event.target.value));\n\n    return (\n        <div>\n            <Navbar/>\n            <TestSandbox>\n                <ListWrapper>\n                    <Margin20>\n                        { Object.keys(tree).length > 0 &&  BinaryTree(tree)}\n                    </Margin20>\n                </ListWrapper>\n                <form style={{paddingLeft:'100px'}} onSubmit={onInsertDown}>\n                    <label>\n                        <input type='text' value={inputValue} onChange={handleChange}></input> Input\n                    </label>\n                    <p>Number of Nodes: {numberNodes}</p>\n                </form>\n            </TestSandbox>\n        </div>\n    )\n}\n\n// Recursion\nfunction BinaryTree (tree) {\n    return(\n        <div>\n            <ul>\n                <Margin20>\n                    <motion.div initial={{scale: 0}} animate={{scale: 1}} whileHover={{scale: 1.5}}>\n                        <DisplayNode>\n                            <NodeContent>{tree.data}</NodeContent>\n                        </DisplayNode>\n                    </motion.div>\n                </Margin20>\n                { tree.left && BinaryTree(tree.left) }\n                { tree.right && BinaryTree(tree.right) }\n            </ul>\n        </div>\n    )\n}\n\nexport default TestAnimation;"]},"metadata":{},"sourceType":"module"}