{"ast":null,"code":"var _jsxFileName = \"/Users/conormccormack/datastructs/src/components/binarytree.js\";\nimport React, { useState } from 'react';\nimport { motion } from 'framer-motion'; // Build and maintain state as array.\n// Each element in array represents a level on the tree.\n\nfunction BinaryTree(props) {\n  const [tree, setTree] = useState([...Array(12)].map((level, index) => {\n    //const newLevel = props.displayNodes.filter(node => node.level === index);\n    const newLevel = [2, 3];\n    return newLevel;\n  })); // Return level on tree given id\n\n  const computeLevel = id => Math.floor(Math.log2(id + 1)); // Compute left-right zero based index of id on its level in the tree.\n\n\n  const computeIndexOnLevel = (id, level) => id + 1 - Math.pow(2, level);\n\n  console.log(tree);\n  console.log('height: ' + props.height);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, JSON.stringify(props.displayNodes));\n}\n\nexport default BinaryTree;","map":{"version":3,"sources":["/Users/conormccormack/datastructs/src/components/binarytree.js"],"names":["React","useState","motion","BinaryTree","props","tree","setTree","Array","map","level","index","newLevel","computeLevel","id","Math","floor","log2","computeIndexOnLevel","pow","console","log","height","JSON","stringify","displayNodes"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,MAAT,QAAuB,eAAvB,C,CAGA;AACA;;AAEA,SAASC,UAAT,CAAqBC,KAArB,EAA2B;AACvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,CAAC,GAAGM,KAAK,CAAC,EAAD,CAAT,EAAeC,GAAf,CAAmB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAClE;AACA,UAAMC,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAjB;AACA,WAAOA,QAAP;AACH,GAJgC,CAAD,CAAhC,CADuB,CAOvB;;AACA,QAAMC,YAAY,GAAGC,EAAE,IAAKC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,IAAL,CAAUH,EAAE,GAAG,CAAf,CAAX,CAA5B,CARuB,CASvB;;;AACA,QAAMI,mBAAmB,GAAG,CAACJ,EAAD,EAAKJ,KAAL,KAAgBI,EAAE,GAAG,CAAL,GAASC,IAAI,CAACI,GAAL,CAAS,CAAT,EAAWT,KAAX,CAArD;;AAEAU,EAAAA,OAAO,CAACC,GAAR,CAAYf,IAAZ;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAahB,KAAK,CAACiB,MAA/B;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKC,IAAI,CAACC,SAAL,CAAenB,KAAK,CAACoB,YAArB,CADL,CADJ;AAMH;;AAED,eAAerB,UAAf","sourcesContent":["import React, {useState} from 'react';\nimport { motion } from 'framer-motion';\n\n\n// Build and maintain state as array.\n// Each element in array represents a level on the tree.\n\nfunction BinaryTree (props){\n    const [tree, setTree] = useState([...Array(12)].map((level, index) => {\n        //const newLevel = props.displayNodes.filter(node => node.level === index);\n        const newLevel = [2, 3];\n        return newLevel;\n    }));\n\n    // Return level on tree given id\n    const computeLevel = id => (Math.floor(Math.log2(id + 1)));\n    // Compute left-right zero based index of id on its level in the tree.\n    const computeIndexOnLevel = (id, level) => (id + 1 - Math.pow(2,level));\n\n    console.log(tree);\n    console.log('height: ' + props.height);\n\n    return(\n        <div>\n            {JSON.stringify(props.displayNodes)}\n        </div>\n    )\n\n}\n\nexport default BinaryTree;"]},"metadata":{},"sourceType":"module"}