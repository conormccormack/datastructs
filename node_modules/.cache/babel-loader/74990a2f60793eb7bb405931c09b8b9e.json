{"ast":null,"code":"var _jsxFileName = \"/Users/conormccormack/datastructs/src/components/searchbar.js\";\nimport React, { PureComponent } from 'react';\nimport Autosuggest from 'react-autosuggest'; //import '../css/autocomplete.css';\n\nconst datastructures = [{\n  category: \"Trees\",\n  queries: [{\n    name: 'AVL Tree'\n  }, {\n    name: 'Binary Search Tree'\n  }, {\n    name: 'Red-Black Tree'\n  }, {\n    name: 'Splay Tree'\n  }]\n}, {\n  category: \"Basics\",\n  queries: [{\n    name: 'Linked List'\n  }, {\n    name: 'Stack'\n  }, {\n    name: 'Queue'\n  }]\n}, {\n  category: \"Sorting Algorithms\",\n  queries: [{\n    name: 'Bubble Sort'\n  }, {\n    name: 'Selection Sort'\n  }, {\n    name: 'Insert Sort'\n  }, {\n    name: 'Merge Sort'\n  }, {\n    name: 'Quick Sort'\n  }, {\n    name: 'Shell Sort'\n  }, {\n    name: 'Radix Sort'\n  }, {\n    name: 'Heap Sort'\n  }]\n}, {\n  category: \"Graph Algorithms\",\n  queries: [{\n    name: 'Breadth-First Search'\n  }, {\n    name: 'Depth-First Search'\n  }, {\n    name: 'Dijkstra\\'s Algorithm'\n  }, {\n    name: 'Prim\\'s Algorithm'\n  }, {\n    name: 'Topological Sort'\n  }, {\n    name: 'Kruskal\\'s Sort'\n  }]\n}]; // Generate suggestions list based on user input matching to suggestion names.\n\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction getSuggestions(value) {\n  const inputValue = value.trim().toLowerCase();\n  return datastructures.map(section => {\n    return {\n      category: section.category,\n      queries: section.queries.filter(name => name.toString().toLowerCase().includes(inputValue))\n    };\n  }).filter(section => section.queries.length > 0);\n} // Retrieve value from suggestion that user has chosen\n\n\nconst getSuggestionValue = suggestion => suggestion.name;\n\nconst getSectionSuggestions = section => {\n  return section.queries;\n};\n\nconst renderSectionTitle = section => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }\n}, section.category);\n\nconst renderSuggestion = suggestion => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }\n}, suggestion.name);\n\nclass Searchbar extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  } // Update value onChange.\n\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state;\n    const inputProps = {\n      placeholder: '\"AVL Trees\"',\n      value,\n      onChange: this.onChange\n    };\n    return /*#__PURE__*/React.createElement(Autosuggest, {\n      multiSection: true,\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSectionTitle: renderSectionTitle,\n      getSectionSuggestiosn: getSectionSuggestions,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default Searchbar;","map":{"version":3,"sources":["/Users/conormccormack/datastructs/src/components/searchbar.js"],"names":["React","PureComponent","Autosuggest","datastructures","category","queries","name","escapeRegexCharacters","str","replace","getSuggestions","value","inputValue","trim","toLowerCase","map","section","filter","toString","includes","length","getSuggestionValue","suggestion","getSectionSuggestions","renderSectionTitle","renderSuggestion","Searchbar","constructor","props","onChange","event","newValue","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","render","inputProps","placeholder"],"mappings":"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","sourcesContent":["import React, {PureComponent} from 'react';\nimport Autosuggest from 'react-autosuggest';\n//import '../css/autocomplete.css';\n\nconst datastructures = [\n    {\n        category: \"Trees\",\n        queries: [\n            {\n                name: 'AVL Tree'\n            },\n            {\n                name: 'Binary Search Tree'\n            },\n            {\n                name: 'Red-Black Tree'\n            },\n            {\n                name: 'Splay Tree'\n            },\n        ]\n    },\n    {\n        category: \"Basics\",\n        queries: [\n            {\n                name: 'Linked List'\n            },\n            {\n                name: 'Stack'\n            },\n            {\n                name: 'Queue'\n            },\n        ],\n    },\n    {\n        category: \"Sorting Algorithms\",\n        queries: [\n            {\n                name: 'Bubble Sort'\n            },\n            {\n                name: 'Selection Sort'\n            },\n            {\n                name: 'Insert Sort'\n            },\n            {\n                name: 'Merge Sort'\n            },\n            {\n                name: 'Quick Sort'\n            },\n            {\n                name: 'Shell Sort'\n            },\n            {\n                name: 'Radix Sort'\n            },\n            {\n                name: 'Heap Sort'\n            },\n        ],\n    },\n    {\n        category: \"Graph Algorithms\",\n        queries: [\n            {\n                name: 'Breadth-First Search'\n            },\n            {\n                name: 'Depth-First Search'\n            },\n            {\n                name: 'Dijkstra\\'s Algorithm'\n            },\n            {\n                name: 'Prim\\'s Algorithm'\n            },\n            {\n                name: 'Topological Sort'\n            },\n            {\n                name: 'Kruskal\\'s Sort'\n            },\n        ]\n    },\n\n];\n\n// Generate suggestions list based on user input matching to suggestion names.\nfunction escapeRegexCharacters(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction getSuggestions(value) {\n    const inputValue = value.trim().toLowerCase();\n\n    return datastructures\n        .map(section => {\n            return {\n                category: section.category,\n                queries: section.queries.filter(name => name.toString().toLowerCase().includes(inputValue))\n            };\n        })\n        .filter(section => section.queries.length > 0)\n\n}\n\n// Retrieve value from suggestion that user has chosen\nconst getSuggestionValue = suggestion => suggestion.name;\n\nconst getSectionSuggestions = section => {\n    return section.queries;\n};\n\nconst renderSectionTitle = section => (\n    <div>\n        {section.category}\n    </div>\n);\n\n\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion.name}\n    </div>\n);\n\nclass Searchbar extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: '',\n            suggestions: []\n        };\n    }\n\n    // Update value onChange.\n    onChange = (event, { newValue }) => {\n       this.setState({\n           value: newValue\n       });\n    };\n\n    onSuggestionsFetchRequested = ({ value }) => {\n        this.setState({\n           suggestions: getSuggestions(value)\n        });\n    };\n\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    render(){\n        const { value, suggestions } = this.state;\n\n        const inputProps = {\n            placeholder: '\"AVL Trees\"',\n            value,\n            onChange: this.onChange\n        };\n\n        return(\n            <Autosuggest\n                multiSection={true}\n                suggestions={suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSectionTitle={renderSectionTitle}\n                getSectionSuggestiosn={getSectionSuggestions}\n                renderSuggestion={renderSuggestion}\n                inputProps={inputProps}\n            />\n        );\n    }\n\n}\n\nexport default Searchbar;"]},"metadata":{},"sourceType":"module"}