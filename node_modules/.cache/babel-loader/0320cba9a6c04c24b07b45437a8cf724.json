{"ast":null,"code":"var _jsxFileName = \"/Users/conormccormack/datastructs/src/components/binarytree.js\";\nimport React, { useEffect, useState } from 'react';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport styled from 'styled-components';\nimport BSTNode from \"./bstnode\";\nconst Flex = styled.div`\n    display: flex;\n`;\nconst FillWidth = styled.div`\n    width: 100%;\n    height: 100%;\n`; // Build and maintain state as array.\n// Each element in array represents a level on the tree.\n\nfunction BinaryTree(props) {\n  // Return level on tree given id\n  const computeLevel = id => Math.floor(Math.log2(id + 1)); // Compute left-right zero based index of id on its level in the tree.\n\n\n  const computeIndexOnLevel = (id, level) => id + 1 - Math.pow(2, level);\n\n  const [tree, setTree] = useState(props.BST.filter(node => node.data !== null).map(node => {\n    const indexOnLevel = computeIndexOnLevel(node.id, node.level);\n    const shift = indexOnLevel % 2 === 0 ? indexOnLevel * -20 : indexOnLevel * 20;\n    return /*#__PURE__*/React.createElement(BSTNode, {\n      data: node.data,\n      key: node.id,\n      shift: shift,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }\n    });\n  }));\n  return /*#__PURE__*/React.createElement(motion.div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AnimatePresence, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, tree));\n}\n\nexport default BinaryTree;","map":{"version":3,"sources":["/Users/conormccormack/datastructs/src/components/binarytree.js"],"names":["React","useEffect","useState","AnimatePresence","motion","styled","BSTNode","Flex","div","FillWidth","BinaryTree","props","computeLevel","id","Math","floor","log2","computeIndexOnLevel","level","pow","tree","setTree","BST","filter","node","data","map","indexOnLevel","shift"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,eAAR,EAAyBC,MAAzB,QAAsC,eAAtC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,MAAMC,IAAI,GAAGF,MAAM,CAACG,GAAI;;CAAxB;AAIA,MAAMC,SAAS,GAAGJ,MAAM,CAACG,GAAI;;;CAA7B,C,CAKA;AACA;;AAEA,SAASE,UAAT,CAAqBC,KAArB,EAA2B;AACvB;AACA,QAAMC,YAAY,GAAGC,EAAE,IAAKC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,IAAL,CAAUH,EAAE,GAAG,CAAf,CAAX,CAA5B,CAFuB,CAGvB;;;AACA,QAAMI,mBAAmB,GAAG,CAACJ,EAAD,EAAKK,KAAL,KAAgBL,EAAE,GAAG,CAAL,GAASC,IAAI,CAACK,GAAL,CAAS,CAAT,EAAWD,KAAX,CAArD;;AAEA,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAACS,KAAK,CAACW,GAAN,CAAUC,MAAV,CAAiBC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc,IAAvC,EAA6CC,GAA7C,CAAkDF,IAAD,IAAS;AACvF,UAAMG,YAAY,GAAGV,mBAAmB,CAACO,IAAI,CAACX,EAAN,EAAUW,IAAI,CAACN,KAAf,CAAxC;AACA,UAAMU,KAAK,GAAGD,YAAY,GAAG,CAAf,KAAqB,CAArB,GAAyBA,YAAY,GAAE,CAAC,EAAxC,GAA8CA,YAAY,GAAG,EAA3E;AACA,wBACI,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAEH,IAAI,CAACC,IAApB;AAA0B,MAAA,GAAG,EAAED,IAAI,CAACX,EAApC;AAAwC,MAAA,KAAK,EAAEe,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH,GANgC,CAAD,CAAhC;AAQA,sBACI,oBAAC,MAAD,CAAQ,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCR,IADD,CADJ,CADJ;AAQH;;AAED,eAAeV,UAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {AnimatePresence, motion} from 'framer-motion';\nimport styled from 'styled-components';\nimport BSTNode from \"./bstnode\";\n\nconst Flex = styled.div`\n    display: flex;\n`\n\nconst FillWidth = styled.div`\n    width: 100%;\n    height: 100%;\n`\n\n// Build and maintain state as array.\n// Each element in array represents a level on the tree.\n\nfunction BinaryTree (props){\n    // Return level on tree given id\n    const computeLevel = id => (Math.floor(Math.log2(id + 1)));\n    // Compute left-right zero based index of id on its level in the tree.\n    const computeIndexOnLevel = (id, level) => (id + 1 - Math.pow(2,level));\n\n    const [tree, setTree] = useState(props.BST.filter(node => node.data !== null).map((node) =>{\n        const indexOnLevel = computeIndexOnLevel(node.id, node.level);\n        const shift = indexOnLevel % 2 === 0 ? indexOnLevel*(-20) : indexOnLevel * 20;\n        return (\n            <BSTNode data={node.data} key={node.id} shift={shift}></BSTNode>\n        )\n    }));\n\n    return(\n        <motion.div>\n            <AnimatePresence>\n            {tree}\n            </AnimatePresence>\n        </motion.div>\n    )\n\n}\n\nexport default BinaryTree;"]},"metadata":{},"sourceType":"module"}