{"ast":null,"code":"var _jsxFileName = \"/Users/conormccormack/datastructs/src/components/hackanimation.js\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport Navbar from \"./navbar\";\nimport { parse, stringify } from \"query-string\";\nconst TestSandbox = styled.div`\n    height: 3900vh;\n    background-color: #EFE7E2;\n    grid-template-columns: 1fr 1fr;\n    display: grid;\n`;\nconst ListWrapper = styled.div`\n    height: 200px; \n    width: 100px;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 20px;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n`;\nconst DisplayNode = styled.div`\n    background-color: #D8BBFF; \n    border-radius: 50%;\n    margin: 20px;\n    height: 100px; \n    width: 100px;\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\nconst PadLeft100 = styled.div`\n    padding-left: 100px;\n`;\nconst NodeContent = styled.div`\n    text-align: center;\n    vertical-align: middle;\n    font-size: 30px;\n    font-family: Helvetica;\n    color: #FFF;\n`;\nconst Margin20 = styled.div`\n    margin: 20px;\n`;\n\nfunction HackAnimation() {\n  const [numberNodes, setNumberNodes] = useState(0);\n  const [inputValue, setInputValue] = useState('');\n  const [removeValue, setRemoveValue] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [displayNodes, setDisplayNodes] = useState([]);\n  const [tree, setTree] = useState([...Array(2049)].map((x, index) => {\n    const parentId = index > 0 ? Math.floor((index - 1) / 2) : null;\n    const level = Math.floor(Math.log2(index));\n    return {\n      data: null,\n      id: index,\n      level: level,\n      parent: parentId,\n      left: index * 2 + 1,\n      right: index * 2 + 2\n    };\n  }));\n\n  const updateTreeIndexInsert = (index, value) => {\n    setTree(tree.map(node => node.id === index ? { ...node,\n      data: value\n    } : node));\n  };\n\n  const maxDepth = tree = tree.reduce((acc, val) => {});\n  useEffect(() => {}, [tree]);\n\n  const insertRecurse = (root, value) => {\n    try {\n      if (parseInt(value) < parseInt(tree[root].data)) {\n        // Base case: insert new value as leaf node\n        if (tree[tree[root].left].data === null) updateTreeIndexInsert(tree[root].left, value);else insertRecurse(tree[root].left, value);\n      } else {\n        // Base case: insert new value as leaf node\n        if (tree[tree[root].right].data === null) updateTreeIndexInsert(tree[root].right, value);else insertRecurse(tree[root].right, value);\n      }\n    } finally {\n      console.log(tree);\n    }\n  };\n\n  const insertNode = () => {\n    setErrorMessage(`Inserting ${inputValue}`);\n\n    if (tree[0].data === null) {\n      updateTreeIndexInsert(0, inputValue);\n    } else insertRecurse(0, inputValue);\n  };\n\n  const handleInputChange = event => setInputValue(event.target.value);\n\n  const onInsertDown = event => {\n    event.preventDefault();\n    if (inputValue === '') return;\n    insertNode();\n    setInputValue('');\n    setNumberNodes(numberNodes => numberNodes + 1);\n  };\n\n  const handleRemoveChange = event => setRemoveValue(event.target.value);\n\n  const onRemoveDown = event => {\n    event.preventDefault();\n    setRemoveValue('');\n    removeNode();\n  }; // For every element in subtree, shift up one level\n\n\n  const shiftRecurse = (root, basis) => {\n    // Base case: do not shift subtree if it does not exist.\n    if (tree[root].data === null) return;\n    const level = tree[root].level; // If not 0th level, shift.\n\n    if (level !== 0) {\n      // const newData = tree[root].data;\n      // const reWrite = root - basis;\n      // setTree(tree.map(node => node.id == reWrite && {...node, data: newData}));\n      // setTree(tree.map(node => node.id == root ? {...node, data: null} : node ));\n      tree[root - basis].data = tree[root].data;\n      tree[root].data = null;\n    } // shift children by basis * 2.\n\n\n    shiftRecurse(tree[root].left, basis * 2);\n    shiftRecurse(tree[root].right, basis * 2);\n  };\n\n  const updateTreeIndexRemove = root => {\n    setErrorMessage('Removing...');\n    const left = tree[root].left;\n    const right = tree[root].right;\n\n    if (tree[left].data === null && tree[right].data === null) {\n      setTree(tree.map(node => node.id === root ? { ...node,\n        data: null\n      } : node));\n    } else if (tree[left].data === null) {\n      shiftRecurse(right, tree[right].id - tree[root].id);\n    } else if (tree[right].data === null) {\n      shiftRecurse(left, tree[left].id - tree[root].id);\n    } else {\n      const successor = findMin(right);\n      tree[root].data = tree[successor].data;\n\n      if (tree[tree[successor].right].data !== null) {\n        shiftRecurse(tree[successor].right, tree[tree[successor].right].id - successor);\n      } else tree[successor].data = null;\n    }\n\n    setNumberNodes(numberNodes => numberNodes - 1);\n  };\n\n  const findMin = root => {\n    if (tree[tree[root].left].data !== null) return findMin(tree[root].left);else return root;\n  };\n\n  const removeRecurse = (root, value) => {\n    console.log(`removeRecurse: root ${root}`);\n\n    if (tree[root].data === null) {\n      setErrorMessage('Element does not exist in the tree.');\n    } else if (parseInt(value) < parseInt(tree[root].data)) {\n      removeRecurse(tree[root].left, value);\n    } else if (parseInt(value) > parseInt(tree[root].data)) {\n      removeRecurse(tree[root].right, value);\n    } else {\n      // Even if current element matches value to remove, we have to check if that value exists\n      // as right child element since we allow for duplicates.\n      if (tree[tree[root].right].data !== value) updateTreeIndexRemove(root);else removeRecurse(tree[root].right, value);\n    }\n  };\n\n  const removeNode = () => {\n    if (tree[0].data === null) setErrorMessage('The tree is empty!');else removeRecurse(0, removeValue);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TestSandbox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ListWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Margin20, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 21\n    }\n  }, JSON.stringify(tree))), /*#__PURE__*/React.createElement(PadLeft100, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onInsertDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: inputValue,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 29\n    }\n  }), \" Input\")), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onRemoveDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: removeValue,\n    onChange: handleRemoveChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 29\n    }\n  }), \" Remove\")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 21\n    }\n  }, \"Number of Nodes: \", numberNodes), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 21\n    }\n  }, errorMessage))));\n}\n\nexport default HackAnimation;","map":{"version":3,"sources":["/Users/conormccormack/datastructs/src/components/hackanimation.js"],"names":["React","useEffect","useState","styled","motion","Navbar","parse","stringify","TestSandbox","div","ListWrapper","DisplayNode","PadLeft100","NodeContent","Margin20","HackAnimation","numberNodes","setNumberNodes","inputValue","setInputValue","removeValue","setRemoveValue","errorMessage","setErrorMessage","displayNodes","setDisplayNodes","tree","setTree","Array","map","x","index","parentId","Math","floor","level","log2","data","id","parent","left","right","updateTreeIndexInsert","value","node","maxDepth","reduce","acc","val","insertRecurse","root","parseInt","console","log","insertNode","handleInputChange","event","target","onInsertDown","preventDefault","handleRemoveChange","onRemoveDown","removeNode","shiftRecurse","basis","updateTreeIndexRemove","successor","findMin","removeRecurse","JSON"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport Navbar from \"./navbar\";\nimport {parse, stringify} from \"query-string\";\n\nconst TestSandbox = styled.div`\n    height: 3900vh;\n    background-color: #EFE7E2;\n    grid-template-columns: 1fr 1fr;\n    display: grid;\n`\n\nconst ListWrapper = styled.div`\n    height: 200px; \n    width: 100px;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 20px;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n`\n\nconst DisplayNode = styled.div`\n    background-color: #D8BBFF; \n    border-radius: 50%;\n    margin: 20px;\n    height: 100px; \n    width: 100px;\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst PadLeft100 = styled.div`\n    padding-left: 100px;\n`\n\nconst NodeContent = styled.div`\n    text-align: center;\n    vertical-align: middle;\n    font-size: 30px;\n    font-family: Helvetica;\n    color: #FFF;\n`\n\nconst Margin20 = styled.div`\n    margin: 20px;\n`\n\nfunction HackAnimation(){\n    const [numberNodes, setNumberNodes] = useState(0);\n    const [inputValue, setInputValue] = useState('');\n    const [removeValue, setRemoveValue] = useState('');\n    const [errorMessage, setErrorMessage] = useState('');\n    const [displayNodes, setDisplayNodes] = useState([]);\n    const [tree, setTree] = useState([...Array(2049)].map((x, index) => {\n        const parentId = index > 0 ? Math.floor((index-1)/2) : null;\n        const level = Math.floor(Math.log2(index));\n        return {data: null, id: index, level: level, parent: parentId, left: index * 2 + 1, right: index * 2 + 2 }\n    }));\n\n    const updateTreeIndexInsert = (index, value) =>{\n        setTree(tree.map(node => node.id === index ? {...node, data: value} : node));\n    };\n\n    const maxDepth = (tree) = tree.reduce((acc, val) => {\n\n        }\n    );\n\n    useEffect(() => {\n\n    },[tree]);\n\n    const insertRecurse = (root, value) => {\n        try {\n            if (parseInt(value) < parseInt(tree[root].data)) {\n                // Base case: insert new value as leaf node\n                if (tree[tree[root].left].data === null) updateTreeIndexInsert(tree[root].left, value);\n                else insertRecurse(tree[root].left, value);\n            } else {\n                // Base case: insert new value as leaf node\n                if (tree[tree[root].right].data === null) updateTreeIndexInsert(tree[root].right, value);\n                else insertRecurse(tree[root].right, value);\n            }\n        } finally {\n            console.log(tree);\n        }\n    };\n\n    const insertNode = () => {\n        setErrorMessage(`Inserting ${inputValue}`);\n        if (tree[0].data === null) {\n            updateTreeIndexInsert(0, inputValue);\n        } else insertRecurse(0, inputValue);\n    };\n\n    const handleInputChange = event => setInputValue(event.target.value);\n\n    const onInsertDown = event => {\n        event.preventDefault();\n        if (inputValue === '') return;\n        insertNode();\n        setInputValue('');\n        setNumberNodes(numberNodes => numberNodes + 1);\n    };\n\n    const handleRemoveChange = event => setRemoveValue(event.target.value);\n\n    const onRemoveDown = event => {\n        event.preventDefault();\n        setRemoveValue('');\n        removeNode();\n    };\n\n    // For every element in subtree, shift up one level\n    const shiftRecurse = (root, basis) => {\n        // Base case: do not shift subtree if it does not exist.\n        if (tree[root].data === null) return;\n        const level = tree[root].level;\n        // If not 0th level, shift.\n        if (level !== 0) {\n            // const newData = tree[root].data;\n            // const reWrite = root - basis;\n            // setTree(tree.map(node => node.id == reWrite && {...node, data: newData}));\n            // setTree(tree.map(node => node.id == root ? {...node, data: null} : node ));\n            tree[root - basis].data = tree[root].data;\n            tree[root].data = null;\n        }\n        // shift children by basis * 2.\n        shiftRecurse(tree[root].left, basis * 2);\n        shiftRecurse(tree[root].right, basis * 2);\n    };\n\n\n    const updateTreeIndexRemove = (root) => {\n        setErrorMessage('Removing...');\n        const left = tree[root].left;\n        const right = tree[root].right;\n        if (tree[left].data === null && tree[right].data === null){\n            setTree(tree.map(node => node.id === root ? {...node, data: null} : node));\n        } else if (tree[left].data === null){\n            shiftRecurse(right, tree[right].id - tree[root].id);\n        } else if (tree[right].data === null) {\n            shiftRecurse(left, tree[left].id - tree[root].id);\n        } else {\n            const successor = findMin(right);\n            tree[root].data = tree[successor].data;\n            if (tree[tree[successor].right].data !== null){\n                shiftRecurse(tree[successor].right, tree[tree[successor].right].id - successor);\n            } else tree[successor].data = null;\n        }\n        setNumberNodes(numberNodes => numberNodes - 1);\n    };\n\n    const findMin = (root) => {\n        if (tree[tree[root].left].data !== null) return findMin(tree[root].left);\n        else return root;\n    };\n\n    const removeRecurse = (root, value) => {\n        console.log(`removeRecurse: root ${root}`);\n        if (tree[root].data === null) {\n            setErrorMessage('Element does not exist in the tree.');\n        } else if (parseInt(value) < parseInt(tree[root].data)) {\n            removeRecurse(tree[root].left, value);\n        } else if (parseInt(value) > parseInt(tree[root].data)){\n            removeRecurse(tree[root].right, value);\n        }\n        else {\n            // Even if current element matches value to remove, we have to check if that value exists\n            // as right child element since we allow for duplicates.\n            if (tree[tree[root].right].data !== value) updateTreeIndexRemove(root);\n            else removeRecurse(tree[root].right, value);\n        }\n    };\n\n    const removeNode = () => {\n        if (tree[0].data === null) setErrorMessage('The tree is empty!');\n        else removeRecurse(0, removeValue);\n    };\n\n\n    return (\n        <div>\n            <Navbar/>\n            <TestSandbox>\n                <ListWrapper>\n                    <Margin20>\n\n\n\n                        {JSON.stringify(tree)}\n                    </Margin20>\n                </ListWrapper>\n                <PadLeft100>\n                    <form onSubmit={onInsertDown}>\n                        <label>\n                            <input type='text' value={inputValue} onChange={handleInputChange}></input> Input\n                        </label>\n                    </form>\n                    <form onSubmit={onRemoveDown}>\n                        <label>\n                            <input type='text' value={removeValue} onChange={handleRemoveChange}></input> Remove\n                        </label>\n                    </form>\n                    <p>Number of Nodes: {numberNodes}</p>\n                    <p>{errorMessage}</p>\n                </PadLeft100>\n            </TestSandbox>\n        </div>\n    );\n}\n\nexport default HackAnimation;"]},"metadata":{},"sourceType":"module"}