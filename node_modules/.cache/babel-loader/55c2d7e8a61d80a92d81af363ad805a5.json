{"ast":null,"code":"var _jsxFileName = \"/Users/conormccormack/datastructs/src/components/hackanimation.js\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport Navbar from './navbar';\nimport PageHeadline from './PageHeadline';\nimport { parse, stringify } from \"query-string\";\nimport RelatedPagesCard from \"./relatedpagescard\";\nimport BinaryTree from \"./binarytree\";\nconst TestSandbox = styled.div`\n    height: 100vh;\n    background-color: #EFE7E2;\n    grid-template-columns: 1fr 1fr;\n    display: grid;\n`;\nconst ListWrapper = styled.div`\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 20px;\n    display: flex;\n\n`;\nconst DisplayNode = styled.div`\n    background-color: #D8BBFF; \n    border-radius: 50%;\n    margin: 20px;\n    height: 100px; \n    width: 100px;\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\nconst PadLeft100 = styled.div`\n    padding-left: 100px;\n`;\nconst NodeContent = styled.div`\n    text-align: center;\n    vertical-align: middle;\n    font-size: 30px;\n    font-family: Helvetica;\n    color: #FFF;\n`;\nconst Margin20 = styled.div`\n    margin: 20px;\n`;\n\nfunction HackAnimation() {\n  const [numberNodes, setNumberNodes] = useState(0);\n  const [inputValue, setInputValue] = useState('');\n  const [removeValue, setRemoveValue] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [height, setHeight] = useState(0);\n  const [displayNodes, setDisplayNodes] = useState([]);\n  const [tree, setTree] = useState([...Array(2049)].map((x, index) => {\n    const parentId = index > 0 ? Math.floor((index - 1) / 2) : null;\n    const level = Math.floor(Math.log2(index + 1));\n    return {\n      data: null,\n      id: index,\n      level: level,\n      parent: parentId,\n      left: index * 2 + 1,\n      right: index * 2 + 2\n    };\n  }));\n\n  const updateTreeIndexInsert = (index, value) => {\n    setTree(tree.map(node => node.id === index ? { ...node,\n      data: value\n    } : node));\n  };\n\n  const recursiveMaxDepth = (max, root) => {\n    if (tree[root].data === null) return max;\n    max = tree[root].level > max ? tree[root].level : max;\n    return Math.max(max, recursiveMaxDepth(max, tree[root].left), recursiveMaxDepth(max, tree[root].right));\n  };\n\n  useEffect(() => {\n    const depth = recursiveMaxDepth(0, 0);\n    setHeight(depth);\n    updateDisplay();\n  }, [tree]);\n\n  const insertRecurse = (root, value) => {\n    if (parseInt(value) < parseInt(tree[root].data)) {\n      // Base case: insert new value as leaf node\n      if (tree[tree[root].left].data === null) updateTreeIndexInsert(tree[root].left, value);else insertRecurse(tree[root].left, value);\n    } else {\n      // Base case: insert new value as leaf node\n      if (tree[tree[root].right].data === null) updateTreeIndexInsert(tree[root].right, value);else insertRecurse(tree[root].right, value);\n    }\n  };\n\n  const insertNode = () => {\n    setErrorMessage(`Inserting ${inputValue}`);\n\n    if (tree[0].data === null) {\n      updateTreeIndexInsert(0, inputValue);\n    } else insertRecurse(0, inputValue);\n\n    setHeight(recursiveMaxDepth(0, 0));\n    updateDisplay();\n  };\n\n  const handleInputChange = event => setInputValue(event.target.value);\n\n  const onInsertDown = event => {\n    event.preventDefault();\n    if (inputValue.trim() === '') return;\n\n    if (isNaN(inputValue)) {\n      setErrorMessage(`Please enter a number (e.g. 27, 3.2)`);\n      return;\n    }\n\n    insertNode();\n    setInputValue('');\n    setNumberNodes(numberNodes => numberNodes + 1);\n  };\n\n  const handleRemoveChange = event => setRemoveValue(event.target.value);\n\n  const onRemoveDown = event => {\n    event.preventDefault();\n    if (removeValue.trim() === '') return;\n\n    if (isNaN(removeValue)) {\n      setErrorMessage(`Please enter a number (e.g. 27, 3.2)`);\n      return;\n    }\n\n    removeNode();\n    setRemoveValue('');\n    updateDisplay();\n  }; // For every element in subtree, shift up one level\n\n\n  const shiftRecurse = (root, basis) => {\n    // Base case: do not shift subtree if it does not exist.\n    if (tree[root].data === null) return;\n    const level = tree[root].level; // If not 0th level, shift.\n\n    if (level !== 0) {\n      tree[root - basis].data = tree[root].data;\n      tree[root].data = null;\n    } // shift children by basis * 2.\n\n\n    shiftRecurse(tree[root].left, basis * 2);\n    shiftRecurse(tree[root].right, basis * 2);\n  };\n\n  const updateTreeIndexRemove = root => {\n    setErrorMessage(`Removing ${removeValue}`);\n    const left = tree[root].left;\n    const right = tree[root].right;\n\n    if (tree[left].data === null && tree[right].data === null) {\n      setTree(tree.map(node => node.id === root ? { ...node,\n        data: null\n      } : node));\n    } else if (tree[left].data === null) {\n      shiftRecurse(right, tree[right].id - tree[root].id);\n    } else if (tree[right].data === null) {\n      shiftRecurse(left, tree[left].id - tree[root].id);\n    } else {\n      const successor = findMin(right);\n      tree[root].data = tree[successor].data;\n\n      if (tree[tree[successor].right].data !== null) {\n        shiftRecurse(tree[successor].right, tree[tree[successor].right].id - successor);\n      } else tree[successor].data = null;\n    }\n\n    setNumberNodes(numberNodes => numberNodes - 1);\n  };\n\n  const findMin = root => {\n    if (tree[tree[root].left].data !== null) return findMin(tree[root].left);else return root;\n  };\n\n  const removeRecurse = (root, value) => {\n    if (tree[root].data === null) {\n      setErrorMessage('Element does not exist in the tree.');\n    } else if (parseInt(value) < parseInt(tree[root].data)) {\n      removeRecurse(tree[root].left, value);\n    } else if (parseInt(value) > parseInt(tree[root].data)) {\n      removeRecurse(tree[root].right, value);\n    } else {\n      // Even if current element matches value to remove, we have to check if that value exists\n      // as right child element since we allow for duplicates.\n      if (tree[tree[root].right].data !== value) updateTreeIndexRemove(root);else removeRecurse(tree[root].right, value);\n    }\n  };\n\n  const updateDisplay = () => {\n    let prevLevel = 0;\n    setDisplayNodes(tree.filter(node => node.data !== null).map(node => {\n      const newLevel = true ? prevLevel !== node.level : false;\n      prevLevel = node.level;\n      return /*#__PURE__*/React.createElement(motion.div, {\n        initial: {\n          scale: 0\n        },\n        animate: {\n          scale: 1\n        },\n        whileHover: {\n          scale: 1.5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 17\n        }\n      }, newLevel && /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 34\n        }\n      }), /*#__PURE__*/React.createElement(DisplayNode, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(NodeContent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 25\n        }\n      }, node.data)));\n    }));\n  };\n\n  const removeNode = () => {\n    if (tree[0].data === null) setErrorMessage('The tree is empty!');else removeRecurse(0, removeValue);\n    setHeight(recursiveMaxDepth(0, 0));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(PageHeadline, {\n    text: 'Binary Search Trees',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TestSandbox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ListWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(BinaryTree, {\n    displayNodes: displayNodes,\n    height: height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(PadLeft100, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onInsertDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: inputValue,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 29\n    }\n  }), \" Input\")), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onRemoveDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: removeValue,\n    onChange: handleRemoveChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 29\n    }\n  }), \" Remove\")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 21\n    }\n  }, \"Number of Nodes: \", numberNodes), numberNodes > 0 && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 42\n    }\n  }, \"Tree Height: \", height + 1), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 21\n    }\n  }, errorMessage))));\n}\n\nexport default HackAnimation;","map":{"version":3,"sources":["/Users/conormccormack/datastructs/src/components/hackanimation.js"],"names":["React","useEffect","useState","styled","motion","Navbar","PageHeadline","parse","stringify","RelatedPagesCard","BinaryTree","TestSandbox","div","ListWrapper","DisplayNode","PadLeft100","NodeContent","Margin20","HackAnimation","numberNodes","setNumberNodes","inputValue","setInputValue","removeValue","setRemoveValue","errorMessage","setErrorMessage","height","setHeight","displayNodes","setDisplayNodes","tree","setTree","Array","map","x","index","parentId","Math","floor","level","log2","data","id","parent","left","right","updateTreeIndexInsert","value","node","recursiveMaxDepth","max","root","depth","updateDisplay","insertRecurse","parseInt","insertNode","handleInputChange","event","target","onInsertDown","preventDefault","trim","isNaN","handleRemoveChange","onRemoveDown","removeNode","shiftRecurse","basis","updateTreeIndexRemove","successor","findMin","removeRecurse","prevLevel","filter","newLevel","scale"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport Navbar from './navbar';\nimport PageHeadline from './PageHeadline';\nimport {parse, stringify} from \"query-string\";\nimport RelatedPagesCard from \"./relatedpagescard\";\nimport BinaryTree from \"./binarytree\";\n\nconst TestSandbox = styled.div`\n    height: 100vh;\n    background-color: #EFE7E2;\n    grid-template-columns: 1fr 1fr;\n    display: grid;\n`\n\nconst ListWrapper = styled.div`\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 20px;\n    display: flex;\n\n`\n\nconst DisplayNode = styled.div`\n    background-color: #D8BBFF; \n    border-radius: 50%;\n    margin: 20px;\n    height: 100px; \n    width: 100px;\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst PadLeft100 = styled.div`\n    padding-left: 100px;\n`\n\nconst NodeContent = styled.div`\n    text-align: center;\n    vertical-align: middle;\n    font-size: 30px;\n    font-family: Helvetica;\n    color: #FFF;\n`\nconst Margin20 = styled.div`\n    margin: 20px;\n`\n\nfunction HackAnimation(){\n    const [numberNodes, setNumberNodes] = useState(0);\n    const [inputValue, setInputValue] = useState('');\n    const [removeValue, setRemoveValue] = useState('');\n    const [errorMessage, setErrorMessage] = useState('');\n    const [height, setHeight] = useState(0);\n    const [displayNodes, setDisplayNodes] = useState([]);\n    const [tree, setTree] = useState([...Array(2049)].map((x, index) => {\n        const parentId = index > 0 ? Math.floor((index-1)/2) : null;\n        const level = Math.floor(Math.log2(index + 1));\n        return {data: null, id: index, level: level, parent: parentId, left: index * 2 + 1, right: index * 2 + 2 }\n    }));\n\n    const updateTreeIndexInsert = (index, value) =>{\n        setTree(tree.map(node => node.id === index ? {...node, data: value} : node));\n    };\n\n    const recursiveMaxDepth = (max, root) => {\n        if (tree[root].data === null) return max;\n        max = tree[root].level > max ? tree[root].level : max;\n        return Math.max(max, recursiveMaxDepth(max, tree[root].left), recursiveMaxDepth(max, tree[root].right));\n    };\n\n    useEffect(() => {\n        const depth = recursiveMaxDepth(0, 0);\n        setHeight(depth);\n        updateDisplay();\n    },[tree]);\n\n    const insertRecurse = (root, value) => {\n        if (parseInt(value) < parseInt(tree[root].data)) {\n            // Base case: insert new value as leaf node\n            if (tree[tree[root].left].data === null) updateTreeIndexInsert(tree[root].left, value);\n            else insertRecurse(tree[root].left, value);\n        } else {\n            // Base case: insert new value as leaf node\n            if (tree[tree[root].right].data === null) updateTreeIndexInsert(tree[root].right, value);\n            else insertRecurse(tree[root].right, value);\n        }\n    };\n\n    const insertNode = () => {\n        setErrorMessage(`Inserting ${inputValue}`);\n        if (tree[0].data === null) {\n            updateTreeIndexInsert(0, inputValue);\n        } else insertRecurse(0, inputValue);\n        setHeight(recursiveMaxDepth(0,0));\n        updateDisplay();\n    };\n\n    const handleInputChange = event => setInputValue(event.target.value);\n\n    const onInsertDown = event => {\n        event.preventDefault();\n        if (inputValue.trim() === '') return;\n        if (isNaN(inputValue)) {\n            setErrorMessage(`Please enter a number (e.g. 27, 3.2)`);\n            return;\n        }\n        insertNode();\n        setInputValue('');\n        setNumberNodes(numberNodes => numberNodes + 1);\n    };\n\n    const handleRemoveChange = event => setRemoveValue(event.target.value);\n\n    const onRemoveDown = event => {\n        event.preventDefault();\n        if (removeValue.trim() === '') return;\n        if (isNaN(removeValue)) {\n                setErrorMessage(`Please enter a number (e.g. 27, 3.2)`);\n                return;\n        }\n        removeNode();\n        setRemoveValue('');\n        updateDisplay();\n    };\n\n    // For every element in subtree, shift up one level\n    const shiftRecurse = (root, basis) => {\n        // Base case: do not shift subtree if it does not exist.\n        if (tree[root].data === null) return;\n        const level = tree[root].level;\n        // If not 0th level, shift.\n        if (level !== 0) {\n            tree[root - basis].data = tree[root].data;\n            tree[root].data = null;\n        }\n        // shift children by basis * 2.\n        shiftRecurse(tree[root].left, basis * 2);\n        shiftRecurse(tree[root].right, basis * 2);\n    };\n\n    const updateTreeIndexRemove = (root) => {\n        setErrorMessage(`Removing ${removeValue}`);\n        const left = tree[root].left;\n        const right = tree[root].right;\n        if (tree[left].data === null && tree[right].data === null){\n            setTree(tree.map(node => node.id === root ? {...node, data: null} : node));\n        } else if (tree[left].data === null){\n            shiftRecurse(right, tree[right].id - tree[root].id);\n        } else if (tree[right].data === null) {\n            shiftRecurse(left, tree[left].id - tree[root].id);\n        } else {\n            const successor = findMin(right);\n            tree[root].data = tree[successor].data;\n            if (tree[tree[successor].right].data !== null){\n                shiftRecurse(tree[successor].right, tree[tree[successor].right].id - successor);\n            } else tree[successor].data = null;\n        }\n        setNumberNodes(numberNodes => numberNodes - 1);\n    };\n\n    const findMin = (root) => {\n        if (tree[tree[root].left].data !== null) return findMin(tree[root].left);\n        else return root;\n    };\n\n    const removeRecurse = (root, value) => {\n        if (tree[root].data === null) {\n            setErrorMessage('Element does not exist in the tree.');\n        } else if (parseInt(value) < parseInt(tree[root].data)) {\n            removeRecurse(tree[root].left, value);\n        } else if (parseInt(value) > parseInt(tree[root].data)){\n            removeRecurse(tree[root].right, value);\n        }\n        else {\n            // Even if current element matches value to remove, we have to check if that value exists\n            // as right child element since we allow for duplicates.\n            if (tree[tree[root].right].data !== value) updateTreeIndexRemove(root);\n            else removeRecurse(tree[root].right, value);\n        }\n    };\n\n    const updateDisplay = () => {\n        let prevLevel = 0;\n        setDisplayNodes(tree.filter(node => node.data !== null).map((node) => {\n            const newLevel = true ? prevLevel !== node.level : false;\n            prevLevel = node.level;\n            return (\n                <motion.div  initial={{scale: 0}} animate={{scale: 1}} whileHover={{scale: 1.5}}>\n                    {newLevel && <br/>}\n                    <DisplayNode>\n                        <NodeContent>{node.data}</NodeContent>\n                    </DisplayNode>\n                </motion.div>\n\n            )\n        }\n        ));\n    };\n\n    const removeNode = () => {\n        if (tree[0].data === null) setErrorMessage('The tree is empty!');\n        else removeRecurse(0, removeValue);\n        setHeight(recursiveMaxDepth(0,0));\n    };\n\n    return (\n        <div>\n            <Navbar/>\n            <PageHeadline text={'Binary Search Trees'} />\n            <TestSandbox>\n                <ListWrapper>\n                    <BinaryTree displayNodes={displayNodes} height={height}/>\n                </ListWrapper>\n                <PadLeft100>\n                    <form onSubmit={onInsertDown}>\n                        <label>\n                            <input type='text' value={inputValue} onChange={handleInputChange}></input> Input\n                        </label>\n                    </form>\n                    <form onSubmit={onRemoveDown}>\n                        <label>\n                            <input type='text' value={removeValue} onChange={handleRemoveChange}></input> Remove\n                        </label>\n                    </form>\n                    <p>Number of Nodes: {numberNodes}</p>\n                    { numberNodes > 0 && <p>Tree Height: {height + 1}</p>}\n                    <p>{errorMessage}</p>\n                </PadLeft100>\n            </TestSandbox>\n        </div>\n    );\n}\n\nexport default HackAnimation;"]},"metadata":{},"sourceType":"module"}