{"ast":null,"code":"var _jsxFileName = \"/Users/conormccormack/datastructs/src/components/testanimation.js\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport Navbar from \"./navbar\";\nconst TestSandbox = styled.div`\n    height: 100vh;\n    background-color: #EFE7E2;\n    grid-template-columns: 1fr 1fr;\n    display: grid;\n`;\nconst ListWrapper = styled.div`\n    height: 200px; \n    width: 100px;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 20px;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n`;\nconst DisplayNode = styled.div`\n    background-color: #D8BBFF; \n    border-radius: 50%;\n    margin: 20px;\n    height: 100px; \n    width: 100px;\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\nconst NodeContent = styled.div`\n    text-align: center;\n    vertical-align: middle;\n    font-size: 30px;\n    font-family: Helvetica;\n    color: #FFF;\n`;\nconst Margin20 = styled.div`\n    margin: 20px;\n`; // class Node {\n//     constructor(data, left = null, right = null) {\n//         this.data = data;\n//         this.leftChild = left;\n//         this.rightChild = right;\n//     }\n// }\n// const TemplateTree = [\n//     {\n//         data: 10,\n//         left: {\n//             data: 2,\n//             left: null,\n//             right: null,\n//         },\n//         right: {\n//             data: 12,\n//             left: null,\n//             right: null,\n//         },\n//     }\n// ];\n\nfunction TestAnimation() {\n  const [numberNodes, setNumberNodes] = useState(0);\n  const [inputValue, setInputValue] = useState([]);\n  const [tree, setTree] = useState({}); // const [tree, setTree] = useState(\n  //     {\n  //         data: 10,\n  //         left: {\n  //             data: 8,\n  //             left: {\n  //                 data: 5,\n  //                 left: null,\n  //                 right: null,\n  //             },\n  //             right: {\n  //                 data: 9,\n  //                 left: null,\n  //                 right: null,\n  //             },\n  //         },\n  //         right: {\n  //             data: 16,\n  //             left: {\n  //                 data: 12,\n  //                 left: null,\n  //                 right: null,\n  //             },\n  //             right: {\n  //                 data: 18,\n  //                 left: null,\n  //                 right: null,\n  //             },\n  //         }\n  //     }\n  // );\n\n  class Node {\n    constructor(data) {\n      this.data = data;\n      this.left = null;\n      this.right = null;\n    }\n\n  }\n\n  class BinarySearchTree {\n    insert(data) {\n      const newNode = new Node(data);\n      this.insertNodeToTree(this.root, newNode);\n    }\n\n    insertNodeToTree(node, newNode) {\n      if (newNode.data < node.data) {\n        if (node.left == null) node.left = newNode;else this.insertNodeToTree(node.left, newNode);\n      } else {\n        if (node.right == null) node.right = newNode;else this.insertNodeToTree(node.right, newNode);\n      }\n    }\n\n    constructor(tree) {\n      this.data = tree.data;\n      if (tree.left != null) this.insertNodeToTree(this.root, tree.left);\n      if (tree.right != null) this.insertNodeToTree(this.root, tree.right);\n      console.log(tree);\n    }\n\n  }\n\n  const insertNode = tree => {\n    let newTree = new BinarySearchTree(tree);\n    newTree.insert(inputValue);\n    setTree(newTree); // let newTree = tree;\n    // console.log(newTree);\n    // if (inputValue >= newTree.data){\n    //     // Base case: create leaf node.\n    //     if (newTree.right == null){\n    //         newTree.right = {\n    //             data: inputValue,\n    //             left: null,\n    //             right: null,\n    //         };\n    //         return newTree;\n    //     }\n    //     else {\n    //         return insertNode(newTree.right);\n    //     }\n    // } else {\n    //     // Base case: create leaf node.\n    //     if (newTree.left == null){\n    //         newTree.left = {\n    //             data: inputValue,\n    //             left: null,\n    //             right: null,\n    //         };\n    //         return newTree;\n    //     } else {\n    //         return insertNode(newTree.right);\n    //     }\n    // }\n  };\n\n  const onInsertDown = event => {\n    event.preventDefault();\n    insertNode(tree); // if (Object.keys(tree).length === 0){\n    //     setTree(\n    //         {\n    //             data: inputValue,\n    //             left: null,\n    //             right: null,\n    //         }\n    //     )\n    // } else {\n    //     setTree(insertNode(tree));\n    // }\n\n    setNumberNodes(numberNodes => numberNodes + 1);\n  };\n\n  const handleChange = event => setInputValue(event.target.value);\n\n  const {\n    first,\n    second\n  } = ['left', 'left'];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TestSandbox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ListWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Margin20, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 21\n    }\n  }, Object.keys(tree).length > 0 && BinaryTree(tree))), /*#__PURE__*/React.createElement(\"form\", {\n    style: {\n      paddingLeft: '100px'\n    },\n    onSubmit: onInsertDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: inputValue,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 25\n    }\n  }), \" Input\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 21\n    }\n  }, \"Number of Nodes: \", numberNodes))));\n} // Recursion\n\n\nfunction BinaryTree(tree) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Margin20, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(motion.div, {\n    initial: {\n      scale: 0\n    },\n    animate: {\n      scale: 1\n    },\n    whileHover: {\n      scale: 1.5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(DisplayNode, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(NodeContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 29\n    }\n  }, tree.data)))), tree.left && BinaryTree(tree.left), tree.right && BinaryTree(tree.right)));\n}\n\nexport default TestAnimation;","map":{"version":3,"sources":["/Users/conormccormack/datastructs/src/components/testanimation.js"],"names":["React","useEffect","useState","styled","motion","Navbar","TestSandbox","div","ListWrapper","DisplayNode","NodeContent","Margin20","TestAnimation","numberNodes","setNumberNodes","inputValue","setInputValue","tree","setTree","Node","constructor","data","left","right","BinarySearchTree","insert","newNode","insertNodeToTree","root","node","console","log","insertNode","newTree","onInsertDown","event","preventDefault","handleChange","target","value","first","second","Object","keys","length","BinaryTree","paddingLeft","scale"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport Navbar from \"./navbar\";\n\nconst TestSandbox = styled.div`\n    height: 100vh;\n    background-color: #EFE7E2;\n    grid-template-columns: 1fr 1fr;\n    display: grid;\n`\n\nconst ListWrapper = styled.div`\n    height: 200px; \n    width: 100px;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 20px;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n`\n\nconst DisplayNode = styled.div`\n    background-color: #D8BBFF; \n    border-radius: 50%;\n    margin: 20px;\n    height: 100px; \n    width: 100px;\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst NodeContent = styled.div`\n    text-align: center;\n    vertical-align: middle;\n    font-size: 30px;\n    font-family: Helvetica;\n    color: #FFF;\n`\n\nconst Margin20 = styled.div`\n    margin: 20px;\n`\n\n\n// class Node {\n//     constructor(data, left = null, right = null) {\n//         this.data = data;\n//         this.leftChild = left;\n//         this.rightChild = right;\n//     }\n// }\n\n// const TemplateTree = [\n//     {\n//         data: 10,\n//         left: {\n//             data: 2,\n//             left: null,\n//             right: null,\n//         },\n//         right: {\n//             data: 12,\n//             left: null,\n//             right: null,\n//         },\n//     }\n// ];\n\n\nfunction TestAnimation(){\n    const [numberNodes, setNumberNodes] = useState(0);\n    const [inputValue, setInputValue ] = useState([]);\n    const [tree, setTree] = useState({});\n    // const [tree, setTree] = useState(\n    //     {\n    //         data: 10,\n    //         left: {\n    //             data: 8,\n    //             left: {\n    //                 data: 5,\n    //                 left: null,\n    //                 right: null,\n    //             },\n    //             right: {\n    //                 data: 9,\n    //                 left: null,\n    //                 right: null,\n    //             },\n    //         },\n    //         right: {\n    //             data: 16,\n    //             left: {\n    //                 data: 12,\n    //                 left: null,\n    //                 right: null,\n    //             },\n    //             right: {\n    //                 data: 18,\n    //                 left: null,\n    //                 right: null,\n    //             },\n    //         }\n    //     }\n    // );\n\n\n    class Node {\n        constructor(data)\n        {\n            this.data = data;\n            this.left = null;\n            this.right = null;\n        }\n    }\n\n    class BinarySearchTree {\n\n        insert(data) {\n            const newNode = new Node(data);\n            this.insertNodeToTree(this.root, newNode);\n        }\n\n        insertNodeToTree(node, newNode){\n            if (newNode.data < node.data){\n                if (node.left == null) node.left = newNode;\n                else this.insertNodeToTree(node.left, newNode);\n            } else {\n                if (node.right == null) node.right = newNode;\n                else this.insertNodeToTree(node.right, newNode);\n            }\n        }\n\n        constructor(tree){\n            this.data = tree.data;\n            if (tree.left != null) this.insertNodeToTree(this.root, tree.left);\n            if (tree.right != null) this.insertNodeToTree(this.root, tree.right);\n            console.log(tree);\n        }\n\n    }\n\n    const insertNode = (tree) => {\n        let newTree = new BinarySearchTree(tree);\n        newTree.insert(inputValue);\n        setTree(newTree);\n\n        // let newTree = tree;\n        // console.log(newTree);\n        // if (inputValue >= newTree.data){\n        //     // Base case: create leaf node.\n        //     if (newTree.right == null){\n        //         newTree.right = {\n        //             data: inputValue,\n        //             left: null,\n        //             right: null,\n        //         };\n        //         return newTree;\n        //     }\n        //     else {\n        //         return insertNode(newTree.right);\n        //     }\n        // } else {\n        //     // Base case: create leaf node.\n        //     if (newTree.left == null){\n        //         newTree.left = {\n        //             data: inputValue,\n        //             left: null,\n        //             right: null,\n        //         };\n        //         return newTree;\n        //     } else {\n        //         return insertNode(newTree.right);\n        //     }\n        // }\n    };\n\n    const onInsertDown = event => {\n        event.preventDefault();\n        insertNode(tree);\n        // if (Object.keys(tree).length === 0){\n        //     setTree(\n        //         {\n        //             data: inputValue,\n        //             left: null,\n        //             right: null,\n        //         }\n        //     )\n        // } else {\n        //     setTree(insertNode(tree));\n        // }\n\n        setNumberNodes(numberNodes => numberNodes + 1);\n    };\n\n    const handleChange = event => setInputValue(event.target.value);\n    const { first, second } = ['left', 'left'];\n\n\n\n    return (\n        <div>\n            <Navbar/>\n            <TestSandbox>\n                <ListWrapper>\n                    <Margin20>\n                        { Object.keys(tree).length > 0 &&  BinaryTree(tree)}\n                    </Margin20>\n                </ListWrapper>\n                <form style={{paddingLeft:'100px'}} onSubmit={onInsertDown}>\n                    <label>\n                        <input type='text' value={inputValue} onChange={handleChange}></input> Input\n                    </label>\n                    <p>Number of Nodes: {numberNodes}</p>\n                </form>\n            </TestSandbox>\n        </div>\n    )\n}\n\n// Recursion\nfunction BinaryTree (tree) {\n    return(\n        <div>\n            <ul>\n                <Margin20>\n                    <motion.div initial={{scale: 0}} animate={{scale: 1}} whileHover={{scale: 1.5}}>\n                        <DisplayNode>\n                            <NodeContent>{tree.data}</NodeContent>\n                        </DisplayNode>\n                    </motion.div>\n                </Margin20>\n                { tree.left && BinaryTree(tree.left) }\n                { tree.right && BinaryTree(tree.right) }\n            </ul>\n        </div>\n    )\n}\n\nexport default TestAnimation;"]},"metadata":{},"sourceType":"module"}