{"ast":null,"code":"var _jsxFileName = \"/Users/conormccormack/datastructs/src/components/binarytree.js\";\nimport React, { useEffect, useState } from 'react';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport '../css/bst.css';\nimport styled from 'styled-components'; // Build and maintain state as array.\n// Each element in array represents a level on the tree.\n\nfunction BinaryTree(props) {\n  // Return level on tree given id\n  const computeLevel = id => Math.floor(Math.log2(id + 1)); // Compute left-right zero based index of id on its level in the tree.\n\n\n  const computeIndexOnLevel = (id, level) => id + 1 - Math.pow(2, level);\n\n  return /*#__PURE__*/React.createElement(AnimatePresence, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(motion.div, {\n    key: \"test\",\n    className: \"bstnode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }\n  }, props.data), /*#__PURE__*/React.createElement(motion.div, {\n    key: \"test1\",\n    className: \"bstnode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 17\n    }\n  }, props.data));\n}\n\nexport default BinaryTree;","map":{"version":3,"sources":["/Users/conormccormack/datastructs/src/components/binarytree.js"],"names":["React","useEffect","useState","AnimatePresence","motion","styled","BinaryTree","props","computeLevel","id","Math","floor","log2","computeIndexOnLevel","level","pow","data"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,eAAR,EAAyBC,MAAzB,QAAsC,eAAtC;AACA,OAAO,gBAAP;AACA,OAAOC,MAAP,MAAmB,mBAAnB,C,CAEA;AACA;;AAEA,SAASC,UAAT,CAAqBC,KAArB,EAA2B;AACvB;AACA,QAAMC,YAAY,GAAGC,EAAE,IAAKC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,IAAL,CAAUH,EAAE,GAAG,CAAf,CAAX,CAA5B,CAFuB,CAGvB;;;AACA,QAAMI,mBAAmB,GAAG,CAACJ,EAAD,EAAKK,KAAL,KAAgBL,EAAE,GAAG,CAAL,GAASC,IAAI,CAACK,GAAL,CAAS,CAAT,EAAWD,KAAX,CAArD;;AAEA,sBAEQ,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD,CAAQ,GAAR;AAAY,IAAA,GAAG,EAAC,MAAhB;AAAuB,IAAA,SAAS,EAAC,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKP,KAAK,CAACS,IADX,CADJ,eAII,oBAAC,MAAD,CAAQ,GAAR;AAAY,IAAA,GAAG,EAAC,OAAhB;AAAwB,IAAA,SAAS,EAAC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKT,KAAK,CAACS,IADX,CAJJ,CAFR;AAaH;;AAED,eAAeV,UAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {AnimatePresence, motion} from 'framer-motion';\nimport '../css/bst.css'\nimport styled from 'styled-components';\n\n// Build and maintain state as array.\n// Each element in array represents a level on the tree.\n\nfunction BinaryTree (props){\n    // Return level on tree given id\n    const computeLevel = id => (Math.floor(Math.log2(id + 1)));\n    // Compute left-right zero based index of id on its level in the tree.\n    const computeIndexOnLevel = (id, level) => (id + 1 - Math.pow(2,level));\n\n    return(\n\n            <AnimatePresence>\n                <motion.div key=\"test\" className=\"bstnode\">\n                    {props.data}\n                </motion.div>\n                <motion.div key=\"test1\" className=\"bstnode\">\n                    {props.data}\n                </motion.div>\n            </AnimatePresence>\n\n    )\n\n}\n\nexport default BinaryTree;"]},"metadata":{},"sourceType":"module"}