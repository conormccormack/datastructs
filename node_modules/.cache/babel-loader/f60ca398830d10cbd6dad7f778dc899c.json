{"ast":null,"code":"var _jsxFileName = \"/Users/conormccormack/datastructs/src/components/hackanimation.js\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport Navbar from \"./navbar\";\nimport { stringify } from \"query-string\";\nconst TestSandbox = styled.div`\n    height: 100vh;\n    background-color: #EFE7E2;\n    grid-template-columns: 1fr 1fr;\n    display: grid;\n`;\nconst ListWrapper = styled.div`\n    height: 200px; \n    width: 100px;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 20px;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n`;\nconst DisplayNode = styled.div`\n    background-color: #D8BBFF; \n    border-radius: 50%;\n    margin: 20px;\n    height: 100px; \n    width: 100px;\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\nconst NodeContent = styled.div`\n    text-align: center;\n    vertical-align: middle;\n    font-size: 30px;\n    font-family: Helvetica;\n    color: #FFF;\n`;\nconst Margin20 = styled.div`\n    margin: 20px;\n`;\n\nfunction HackAnimation() {\n  const [numberNodes, setNumberNodes] = useState(0);\n  const [inputValue, setInputValue] = useState();\n  const [activeNodes, setActiveNodes] = useState([]);\n  const [tree, setTree] = useState([...Array(100)].map((x, index) => {\n    const parentId = index > 0 ? Math.floor((index - 1) / 2) : null;\n    return {\n      data: null,\n      id: index,\n      parent: parentId,\n      left: index * 2 + 1,\n      right: index * 2 + 2\n    };\n  }));\n\n  const updateTreeIndex = (index, value) => {\n    setTree(tree.map(node => node.id === index ? { ...node,\n      data: value\n    } : node));\n  };\n\n  const insertRecurse = (root, value) => {\n    if (tree[root].data < value) {\n      // Base case: insert new value as leaf node\n      if (tree[tree[root].left].data === null) updateTreeIndex(tree[root].left, value);else insertRecurse(tree[root].left, value);\n    } else {\n      // Base case: insert new value as leaf node\n      if (tree[tree[root].right].data === null) updateTreeIndex(tree[root].right, value);else insertRecurse(tree[root].right, value);\n    }\n  };\n\n  const insertNode = () => {\n    if (tree[0].data === null) {\n      updateTreeIndex(0, inputValue);\n    } else insertRecurse(0, inputValue);\n  };\n\n  const handleChange = event => setInputValue(event.target.value);\n\n  const onInsertDown = event => {\n    event.preventDefault();\n    insertNode();\n    setNumberNodes(numberNodes => numberNodes + 1);\n  };\n\n  console.log(tree);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TestSandbox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ListWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Margin20, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"form\", {\n    style: {\n      paddingLeft: '100px'\n    },\n    onSubmit: onInsertDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: inputValue,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 25\n    }\n  }), \" Input\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  }, \"Number of Nodes: \", numberNodes))));\n}\n\nexport default HackAnimation;","map":{"version":3,"sources":["/Users/conormccormack/datastructs/src/components/hackanimation.js"],"names":["React","useEffect","useState","styled","motion","Navbar","stringify","TestSandbox","div","ListWrapper","DisplayNode","NodeContent","Margin20","HackAnimation","numberNodes","setNumberNodes","inputValue","setInputValue","activeNodes","setActiveNodes","tree","setTree","Array","map","x","index","parentId","Math","floor","data","id","parent","left","right","updateTreeIndex","value","node","insertRecurse","root","insertNode","handleChange","event","target","onInsertDown","preventDefault","console","log","paddingLeft"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport Navbar from \"./navbar\";\nimport {stringify} from \"query-string\";\n\nconst TestSandbox = styled.div`\n    height: 100vh;\n    background-color: #EFE7E2;\n    grid-template-columns: 1fr 1fr;\n    display: grid;\n`\n\nconst ListWrapper = styled.div`\n    height: 200px; \n    width: 100px;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 20px;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n`\n\nconst DisplayNode = styled.div`\n    background-color: #D8BBFF; \n    border-radius: 50%;\n    margin: 20px;\n    height: 100px; \n    width: 100px;\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst NodeContent = styled.div`\n    text-align: center;\n    vertical-align: middle;\n    font-size: 30px;\n    font-family: Helvetica;\n    color: #FFF;\n`\n\nconst Margin20 = styled.div`\n    margin: 20px;\n`\n\nfunction HackAnimation(){\n    const [numberNodes, setNumberNodes] = useState(0);\n    const [inputValue, setInputValue] = useState();\n    const [activeNodes, setActiveNodes] = useState([]);\n    const [tree, setTree] = useState([...Array(100)].map((x, index) => {\n        const parentId = index > 0 ? Math.floor((index-1)/2) : null;\n        return {data: null, id: index, parent: parentId, left: index * 2 + 1, right: index * 2 + 2 }\n    }));\n\n    const updateTreeIndex = (index, value) =>{\n        setTree(tree.map(node => node.id === index ? {...node, data: value} : node));\n    };\n\n    const insertRecurse = (root, value) => {\n        if (tree[root].data < value){\n            // Base case: insert new value as leaf node\n            if (tree[tree[root].left].data === null) updateTreeIndex(tree[root].left, value);\n            else insertRecurse(tree[root].left, value);\n        } else {\n            // Base case: insert new value as leaf node\n            if (tree[tree[root].right].data === null) updateTreeIndex(tree[root].right, value);\n            else insertRecurse(tree[root].right, value);\n        }\n    };\n\n    const insertNode = () => {\n        if (tree[0].data === null){\n            updateTreeIndex(0, inputValue);\n        } else insertRecurse(0, inputValue);\n    };\n\n    const handleChange = event => setInputValue(event.target.value);\n\n    const onInsertDown = event => {\n        event.preventDefault();\n        insertNode();\n        setNumberNodes(numberNodes => numberNodes + 1);\n    };\n\n    console.log(tree);\n\n    return (\n        <div>\n            <Navbar/>\n            <TestSandbox>\n                <ListWrapper>\n                    <Margin20>\n\n                    </Margin20>\n                </ListWrapper>\n                <form style={{paddingLeft:'100px'}} onSubmit={onInsertDown}>\n                    <label>\n                        <input type='text' value={inputValue} onChange={handleChange}></input> Input\n                    </label>\n                    <p>Number of Nodes: {numberNodes}</p>\n                </form>\n            </TestSandbox>\n        </div>\n    );\n}\n\nexport default HackAnimation;"]},"metadata":{},"sourceType":"module"}