{"ast":null,"code":"var _jsxFileName = \"/Users/conormccormack/datastructs/src/components/hackanimation.js\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport Navbar from \"./navbar\";\nimport { stringify } from \"query-string\";\nconst TestSandbox = styled.div`\n    height: 100vh;\n    background-color: #EFE7E2;\n    grid-template-columns: 1fr 1fr;\n    display: grid;\n`;\nconst ListWrapper = styled.div`\n    height: 200px; \n    width: 100px;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 20px;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n`;\nconst DisplayNode = styled.div`\n    background-color: #D8BBFF; \n    border-radius: 50%;\n    margin: 20px;\n    height: 100px; \n    width: 100px;\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\nconst NodeContent = styled.div`\n    text-align: center;\n    vertical-align: middle;\n    font-size: 30px;\n    font-family: Helvetica;\n    color: #FFF;\n`;\nconst Margin20 = styled.div`\n    margin: 20px;\n`;\n\nfunction HackAnimation() {\n  const [numberNodes, setNumberNodes] = useState(0);\n  const [inputValue, setInputValue] = useState('');\n  const [removeValue, setRemoveValue] = useState('');\n  const [tree, setTree] = useState([...Array(2049)].map((x, index) => {\n    const parentId = index > 0 ? Math.floor((index - 1) / 2) : null;\n    return {\n      data: null,\n      id: index,\n      parent: parentId,\n      left: index * 2 + 1,\n      right: index * 2 + 2\n    };\n  }));\n\n  const updateTreeIndex = (index, value) => {\n    setTree(tree.map(node => node.id === index ? { ...node,\n      data: value\n    } : node));\n  };\n\n  const insertRecurse = (root, value) => {\n    try {\n      if (parseInt(value) < parseInt(tree[root].data)) {\n        // Base case: insert new value as leaf node\n        if (tree[tree[root].left].data === null) updateTreeIndex(tree[root].left, value);else insertRecurse(tree[root].left, value);\n      } else {\n        // Base case: insert new value as leaf node\n        if (tree[tree[root].right].data === null) updateTreeIndex(tree[root].right, value);else insertRecurse(tree[root].right, value);\n      }\n    } finally {\n      console.log(tree);\n    }\n  };\n\n  const removeNode = () => {};\n\n  const insertNode = () => {\n    if (tree[0].data === null) {\n      updateTreeIndex(0, inputValue);\n    } else insertRecurse(0, inputValue);\n  };\n\n  const handleInputChange = event => setInputValue(event.target.value);\n\n  const onInsertDown = event => {\n    event.preventDefault();\n    insertNode();\n    setNumberNodes(numberNodes => numberNodes + 1);\n  };\n\n  const handleRemoveChange = event => setRemoveValue(event.target.value);\n\n  const onRemoveDown = event => {\n    event.preventDefault();\n    removeNode();\n    setNumberNodes(numberNodes => numberNodes - 1);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TestSandbox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ListWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Margin20, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    style: {\n      paddingLeft: '100px'\n    },\n    onSubmit: onInsertDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: inputValue,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 29\n    }\n  }), \" Input\")), /*#__PURE__*/React.createElement(\"form\", {\n    style: {\n      paddingLeft: '100px'\n    },\n    onSubmit: onRemoveDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: removeValue,\n    onChange: handleRemoveChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 29\n    }\n  }), \" Remove\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 25\n    }\n  }, \"Number of Nodes: \", numberNodes)))));\n}\n\nexport default HackAnimation;","map":{"version":3,"sources":["/Users/conormccormack/datastructs/src/components/hackanimation.js"],"names":["React","useEffect","useState","styled","motion","Navbar","stringify","TestSandbox","div","ListWrapper","DisplayNode","NodeContent","Margin20","HackAnimation","numberNodes","setNumberNodes","inputValue","setInputValue","removeValue","setRemoveValue","tree","setTree","Array","map","x","index","parentId","Math","floor","data","id","parent","left","right","updateTreeIndex","value","node","insertRecurse","root","parseInt","console","log","removeNode","insertNode","handleInputChange","event","target","onInsertDown","preventDefault","handleRemoveChange","onRemoveDown","paddingLeft"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAAQC,SAAR,QAAwB,cAAxB;AAEA,MAAMC,WAAW,GAAGJ,MAAM,CAACK,GAAI;;;;;CAA/B;AAOA,MAAMC,WAAW,GAAGN,MAAM,CAACK,GAAI;;;;;;;;CAA/B;AAUA,MAAME,WAAW,GAAGP,MAAM,CAACK,GAAI;;;;;;;;;;CAA/B;AAYA,MAAMG,WAAW,GAAGR,MAAM,CAACK,GAAI;;;;;;CAA/B;AAQA,MAAMI,QAAQ,GAAGT,MAAM,CAACK,GAAI;;CAA5B;;AAIA,SAASK,aAAT,GAAwB;AACpB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACc,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACgB,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACkB,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAAC,CAAC,GAAGoB,KAAK,CAAC,IAAD,CAAT,EAAiBC,GAAjB,CAAqB,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAChE,UAAMC,QAAQ,GAAGD,KAAK,GAAG,CAAR,GAAYE,IAAI,CAACC,KAAL,CAAW,CAACH,KAAK,GAAC,CAAP,IAAU,CAArB,CAAZ,GAAsC,IAAvD;AACA,WAAO;AAACI,MAAAA,IAAI,EAAE,IAAP;AAAaC,MAAAA,EAAE,EAAEL,KAAjB;AAAwBM,MAAAA,MAAM,EAAEL,QAAhC;AAA0CM,MAAAA,IAAI,EAAEP,KAAK,GAAG,CAAR,GAAY,CAA5D;AAA+DQ,MAAAA,KAAK,EAAER,KAAK,GAAG,CAAR,GAAY;AAAlF,KAAP;AACH,GAHgC,CAAD,CAAhC;;AAKA,QAAMS,eAAe,GAAG,CAACT,KAAD,EAAQU,KAAR,KAAiB;AACrCd,IAAAA,OAAO,CAACD,IAAI,CAACG,GAAL,CAASa,IAAI,IAAIA,IAAI,CAACN,EAAL,KAAYL,KAAZ,GAAoB,EAAC,GAAGW,IAAJ;AAAUP,MAAAA,IAAI,EAAEM;AAAhB,KAApB,GAA6CC,IAA9D,CAAD,CAAP;AACH,GAFD;;AAIA,QAAMC,aAAa,GAAG,CAACC,IAAD,EAAOH,KAAP,KAAiB;AACnC,QAAI;AACA,UAAII,QAAQ,CAACJ,KAAD,CAAR,GAAkBI,QAAQ,CAACnB,IAAI,CAACkB,IAAD,CAAJ,CAAWT,IAAZ,CAA9B,EAAiD;AAC7C;AACA,YAAIT,IAAI,CAACA,IAAI,CAACkB,IAAD,CAAJ,CAAWN,IAAZ,CAAJ,CAAsBH,IAAtB,KAA+B,IAAnC,EAAyCK,eAAe,CAACd,IAAI,CAACkB,IAAD,CAAJ,CAAWN,IAAZ,EAAkBG,KAAlB,CAAf,CAAzC,KACKE,aAAa,CAACjB,IAAI,CAACkB,IAAD,CAAJ,CAAWN,IAAZ,EAAkBG,KAAlB,CAAb;AACR,OAJD,MAIO;AACH;AACA,YAAIf,IAAI,CAACA,IAAI,CAACkB,IAAD,CAAJ,CAAWL,KAAZ,CAAJ,CAAuBJ,IAAvB,KAAgC,IAApC,EAA0CK,eAAe,CAACd,IAAI,CAACkB,IAAD,CAAJ,CAAWL,KAAZ,EAAmBE,KAAnB,CAAf,CAA1C,KACKE,aAAa,CAACjB,IAAI,CAACkB,IAAD,CAAJ,CAAWL,KAAZ,EAAmBE,KAAnB,CAAb;AACR;AACJ,KAVD,SAUU;AACNK,MAAAA,OAAO,CAACC,GAAR,CAAYrB,IAAZ;AACH;AACJ,GAdD;;AAgBA,QAAMsB,UAAU,GAAG,MAAM,CAExB,CAFD;;AAIA,QAAMC,UAAU,GAAG,MAAM;AACrB,QAAIvB,IAAI,CAAC,CAAD,CAAJ,CAAQS,IAAR,KAAiB,IAArB,EAA2B;AACvBK,MAAAA,eAAe,CAAC,CAAD,EAAIlB,UAAJ,CAAf;AACH,KAFD,MAEOqB,aAAa,CAAC,CAAD,EAAIrB,UAAJ,CAAb;AACV,GAJD;;AAMA,QAAM4B,iBAAiB,GAAGC,KAAK,IAAI5B,aAAa,CAAC4B,KAAK,CAACC,MAAN,CAAaX,KAAd,CAAhD;;AAEA,QAAMY,YAAY,GAAGF,KAAK,IAAI;AAC1BA,IAAAA,KAAK,CAACG,cAAN;AACAL,IAAAA,UAAU;AACV5B,IAAAA,cAAc,CAACD,WAAW,IAAIA,WAAW,GAAG,CAA9B,CAAd;AACH,GAJD;;AAMA,QAAMmC,kBAAkB,GAAGJ,KAAK,IAAI1B,cAAc,CAAC0B,KAAK,CAACC,MAAN,CAAaX,KAAd,CAAlD;;AAEA,QAAMe,YAAY,GAAGL,KAAK,IAAI;AAC1BA,IAAAA,KAAK,CAACG,cAAN;AACAN,IAAAA,UAAU;AACV3B,IAAAA,cAAc,CAACD,WAAW,IAAIA,WAAW,GAAG,CAA9B,CAAd;AACH,GAJD;;AAMA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAM,IAAA,KAAK,EAAE;AAACqC,MAAAA,WAAW,EAAC;AAAb,KAAb;AAAoC,IAAA,QAAQ,EAAEJ,YAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAE/B,UAA1B;AAAsC,IAAA,QAAQ,EAAE4B,iBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,WADJ,CADJ,eAMI;AAAM,IAAA,KAAK,EAAE;AAACO,MAAAA,WAAW,EAAC;AAAb,KAAb;AAAoC,IAAA,QAAQ,EAAED,YAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAEhC,WAA1B;AAAuC,IAAA,QAAQ,EAAE+B,kBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,YADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAqBnC,WAArB,CAJJ,CANJ,CANJ,CAFJ,CADJ;AAyBH;;AAED,eAAeD,aAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport Navbar from \"./navbar\";\nimport {stringify} from \"query-string\";\n\nconst TestSandbox = styled.div`\n    height: 100vh;\n    background-color: #EFE7E2;\n    grid-template-columns: 1fr 1fr;\n    display: grid;\n`\n\nconst ListWrapper = styled.div`\n    height: 200px; \n    width: 100px;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 20px;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n`\n\nconst DisplayNode = styled.div`\n    background-color: #D8BBFF; \n    border-radius: 50%;\n    margin: 20px;\n    height: 100px; \n    width: 100px;\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst NodeContent = styled.div`\n    text-align: center;\n    vertical-align: middle;\n    font-size: 30px;\n    font-family: Helvetica;\n    color: #FFF;\n`\n\nconst Margin20 = styled.div`\n    margin: 20px;\n`\n\nfunction HackAnimation(){\n    const [numberNodes, setNumberNodes] = useState(0);\n    const [inputValue, setInputValue] = useState('');\n    const [removeValue, setRemoveValue] = useState('');\n    const [tree, setTree] = useState([...Array(2049)].map((x, index) => {\n        const parentId = index > 0 ? Math.floor((index-1)/2) : null;\n        return {data: null, id: index, parent: parentId, left: index * 2 + 1, right: index * 2 + 2 }\n    }));\n\n    const updateTreeIndex = (index, value) =>{\n        setTree(tree.map(node => node.id === index ? {...node, data: value} : node));\n    };\n\n    const insertRecurse = (root, value) => {\n        try {\n            if (parseInt(value) < parseInt(tree[root].data)) {\n                // Base case: insert new value as leaf node\n                if (tree[tree[root].left].data === null) updateTreeIndex(tree[root].left, value);\n                else insertRecurse(tree[root].left, value);\n            } else {\n                // Base case: insert new value as leaf node\n                if (tree[tree[root].right].data === null) updateTreeIndex(tree[root].right, value);\n                else insertRecurse(tree[root].right, value);\n            }\n        } finally {\n            console.log(tree);\n        }\n    };\n\n    const removeNode = () => {\n\n    };\n\n    const insertNode = () => {\n        if (tree[0].data === null) {\n            updateTreeIndex(0, inputValue);\n        } else insertRecurse(0, inputValue);\n    };\n\n    const handleInputChange = event => setInputValue(event.target.value);\n\n    const onInsertDown = event => {\n        event.preventDefault();\n        insertNode();\n        setNumberNodes(numberNodes => numberNodes + 1);\n    };\n\n    const handleRemoveChange = event => setRemoveValue(event.target.value);\n\n    const onRemoveDown = event => {\n        event.preventDefault();\n        removeNode();\n        setNumberNodes(numberNodes => numberNodes - 1);\n    };\n\n    return (\n        <div>\n            <Navbar/>\n            <TestSandbox>\n                <ListWrapper>\n                    <Margin20>\n\n                    </Margin20>\n                </ListWrapper>\n                <div>\n                    <form style={{paddingLeft:'100px'}} onSubmit={onInsertDown}>\n                        <label>\n                            <input type='text' value={inputValue} onChange={handleInputChange}></input> Input\n                        </label>\n                    </form>\n                    <form style={{paddingLeft:'100px'}} onSubmit={onRemoveDown}>\n                        <label>\n                            <input type='text' value={removeValue} onChange={handleRemoveChange}></input> Remove\n                        </label>\n                        <p>Number of Nodes: {numberNodes}</p>\n                    </form>\n                </div>\n            </TestSandbox>\n        </div>\n    );\n}\n\nexport default HackAnimation;"]},"metadata":{},"sourceType":"module"}