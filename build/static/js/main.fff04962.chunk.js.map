{"version":3,"sources":["resources/images/darklogo.png","resources/images/logo_waves.svg","resources/images/darklogotag.svg","resources/fonts/Ramaraja-Regular.ttf","components/homebutton.js","components/navigationbutton.js","components/searchbar.js","components/login_register_button.js","components/exploredropdown.js","components/navbar.js","components/home/homemaingraphic.js","components/home/mainlanding.js","components/home/home.js","components/aboutmaingraphic.js","components/about.js","components/PageHeadline.js","components/relatedpagescard.js","components/bstnode.js","components/hackanimation.js","components/catalog.js","components/premium.js","components/testanimation.js","components/animetest.js","components/refnode.js","components/reftest.js","components/bst.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomeButton","style","fontFamily","className","to","alt","src","require","Button","styled","div","NavigationButton","props","nextPage","includes","exploreCategory","replace","isExplore","textDecoration","color","dataStructures","category","queries","name","getSuggestions","value","inputValue","trim","toLowerCase","length","map","section","filter","query","getSuggestionValue","suggestion","getSectionSuggestions","renderSectionTitle","renderSuggestion","Searchbar","onChange","event","newValue","setState","onKeyDown","key","enterDown","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","this","inputProps","placeholder","multiSection","PureComponent","LoginButton","Buttontext","LoginRegister","NavLayout","SearchbarContainer","Navbar","role","ResponsiveGraphic","HomeMainGraphic","width","WelcomeHeadline","WelcomeBody","MainWrapper","WelcomeMessage","Mainlanding","HomeContainer","Home","variants","transition","initial","animate","exit","MainGraphic","AboutMainGraphic","AboutContainer","AboutHeadline","AboutMessage","AboutBody","GitHubLink","a","About","href","BSTNode","CatalogContainer","CatalogHeadline","Results","ResultCategory","ResultPage","Pages","url","resultsToHTML","results","cat","result","Catalog","queryString","parse","location","search","SearchResults","filt","db","i","res","j","push","resultsByCategory","term","view","PremiumContainer","PremiumHeadline","Premium","TestAnimation","shift_x","resizeTimer","PageWrapper","NodeContainer","TRAVERSE_DURATION","traverseCount","traverseOn","allowDuplicate","formatTimeline","anime","timeline","autoplay","Node","level","id","left","right","parent","line","BinarySearchTree","root","numActiveNodes","x_distances","Map","updateLevels","node","total","getTreeHeight","Math","max","count","newNode","addMessageToLog","insertNode","addTraverseStep","setErrorMessage","removeRecurse","deleteNode","child_of_type","replacement","swap","findLeftmost","add","targets","document","getElementById","innerHTML","easing","round","duration","removeElementFromDOM","shift_order","keyframes","scale","translateX","translateY","NODE_RADIUS","background","stroke","toRemove","opacity","delay","complete","anim","remove","addNodeToDOM","createElement","classList","setAttribute","frontHighlight","text","createTextNode","appendChild","getWidthMidpoint","selector","getBoundingClientRect","size","message","options","begin","p","logs","scrollTop","scrollHeight","formatBinaryTree","tree","toggleFormDisable","buildNodeTimeline","buildEdgeTimeline","play","finished","x1","get","y1","x2","y2","isNew","parseFloat","getAttribute","d","x","set","child","svg","parent_selector","child_selector","container","bottom","y","path","createElementNS","addPathToDom","marginLeft","disabled","AnimeTest","removeValue","bst","multiInput","handleInputSubmit","bind","handleInputChange","handleRemoveChange","handleRemoveSubmit","toggleAllowDuplicate","calculateShiftX","onResize","updateActiveNodeCount","handleMultiSubmit","handleMultiChange","parseMulti","target","preventDefault","isNaN","insert","updateTreeHeight","focus","success","instructions","idx","open_brack","substring","indexOf","close_brack","console","log","add_group","split","el","concat","newNodes","error","toString","nodeContainer","rightOverflow","min","window","addEventListener","toggleTraverseOn","randomTree","Array","floor","random","sortedTree","from","sort","median","medianIndex","forEach","index","clearTimeout","setTimeout","onSubmit","type","onClick","defaultChecked","defaultValue","handleIntervalChange","rows","Component","RefNode","React","forwardRef","ref","Transition","mountOnEnter","unmountOnExit","addEndListener","done","gsap","ease","onComplete","TreeContainer","PageContainer","ControlContainer","array","getInOrderArray","subTreeSize","Reftree","memo","nodeRef","useRef","useState","nodeData","setNodeData","removeCount","setRemoveCount","insertCount","setInsertCount","setCount","height","setHeight","setInputValue","setRemoveValue","setMessage","useEffect","current","TransitionGroup","e","Wrapper","Headline","BST","PageVariants","pageIn","pageInit","pageOut","PageTransition","App","useLocation","exitBeforeEnter","pathname","exact","render","Boolean","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.fff04962.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/darklogo.474e48eb.png\";","module.exports = __webpack_public_path__ + \"static/media/logo_waves.4c2dd6ca.svg\";","module.exports = __webpack_public_path__ + \"static/media/darklogotag.fb6502fe.svg\";","module.exports = __webpack_public_path__ + \"static/media/Ramaraja-Regular.0358271b.ttf\";","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction HomeButton(){\n    return (\n        <Link style={{ fontFamily: 'Ramaraja' }} className=\"homeLink\" to='/'>\n            <img className=\"logoImage\" alt=\"datastructs logo\" src={require(\"../resources/images/darklogo.png\")}/>\n        </Link>\n    );\n}\n\nexport default HomeButton;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\nimport '../resources/fonts/fontawesome/css/all.css';\n\nconst Button = styled.div`\n    font-size: 16px;\n    vertical-align: text-bottom;\n    font-family: Raleway, sans-serif;\n    font-weight: 500;\n    padding-top: 8px;\n    padding-left: 15px;\n    padding-right: 15px;\n`\n\nfunction NavigationButton(props){\n    const parseNextPageLink = () => {\n        if (props.nextPage.includes('everything')){\n            return '/catalog?view=all'\n        } else if (props.nextPage.includes('explore')){\n            return `/catalog?view=${props.exploreCategory}`\n        } else {\n            return `/${props.nextPage.replace(/\\W/g, '')}`\n        }\n    };\n\n    const nextPage = parseNextPageLink();\n    const isExplore = props.nextPage.includes('ex');\n\n    return (\n        <Button>\n            <Link style={{textDecoration:'None' , color:'black'}} to={nextPage}> {props.nextPage}\n                {isExplore ? <i className=\"fas caret fa-caret-down\"/> : ''}\n            </Link>\n        </Button>\n    )\n}\n\nexport default NavigationButton;","import React, {PureComponent} from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport {Redirect} from 'react-router-dom';\nimport '../css/autocomplete.css';\n\nconst dataStructures = [\n    {\n        category: \"Trees\",\n        queries: [\n            {\n                name: 'AVL Tree'\n            },\n            {\n                name: 'Binary Search Tree'\n            },\n            {\n                name: 'Red-Black Tree'\n            },\n            {\n                name: 'Splay Tree'\n            },\n        ]\n    },\n    {\n        category: \"Basics\",\n        queries: [\n            {\n                name: 'Linked List'\n            },\n            {\n                name: 'Stack'\n            },\n            {\n                name: 'Queue'\n            },\n        ],\n    },\n    {\n        category: \"Sorting Algorithms\",\n        queries: [\n            {\n                name: 'Bubble Sort'\n            },\n            {\n                name: 'Selection Sort'\n            },\n            {\n                name: 'Insert Sort'\n            },\n            {\n                name: 'Merge Sort'\n            },\n            {\n                name: 'Quick Sort'\n            },\n            {\n                name: 'Radix Sort'\n            },\n            {\n                name: 'Heap Sort'\n            },\n        ],\n    },\n    {\n        category: \"Graph Algorithms\",\n        queries: [\n            {\n                name: 'Breadth-First Search'\n            },\n            {\n                name: 'Depth-First Search'\n            },\n            {\n                name: 'Dijkstra\\'s Algorithm'\n            },\n            {\n                name: 'Prim\\'s Algorithm'\n            },\n            {\n                name: 'Topological Sort'\n            },\n            {\n                name: 'Kruskal\\'s Sort'\n            },\n        ]\n    },\n\n];\n\n// Generate suggestions list based on user input matching to suggestion names.\nfunction getSuggestions(value) {\n    const inputValue = value.trim().toLowerCase();\n    if (inputValue.length === 0) {\n        return []\n    };\n\n    return dataStructures\n        .map(section => {\n            return {\n                category: section.category,\n                queries: section.queries.filter(query => query.name.toLowerCase().includes(inputValue))\n            };\n        })\n        .filter(section => section.queries.length > 0)\n\n}\n\n// Given a suggestion, return the name\nconst getSuggestionValue = suggestion => suggestion.name;\n\n// Given a section, return an array of corresponding queries\nconst getSectionSuggestions = section => {\n    return section.queries;\n};\n\n// Given a section, render its category name as bold text\nconst renderSectionTitle = section => (\n    <strong>\n        {section.category}\n    </strong>\n);\n\n// Given a suggestion (query), render its name\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion.name}\n    </div>\n);\n\nclass Searchbar extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: '',\n            suggestions: [],\n            enterDown: false,\n        };\n    }\n\n    // Update value on change to input box.\n    onChange = (event, { newValue }) => {\n       this.setState({\n           value: newValue\n       });\n    };\n\n    onKeyDown = (event) => {\n        if (event.key === 'Enter'){\n            this.setState({\n                enterDown: true,\n            });\n        }\n    };\n\n    // Repopulate suggestions whenever requested.\n    onSuggestionsFetchRequested = ({ value }) => {\n        this.setState({\n           suggestions: getSuggestions(value)\n        });\n    };\n\n    // Clean up function\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    render(){\n        const { value, suggestions } = this.state;\n\n        const inputProps = {\n            placeholder: 'Search (e.g. \"AVL Tree\")',\n            value,\n            onChange: this.onChange,\n            onKeyDown: this.onKeyDown,\n        };\n\n        const enterDown = this.state.enterDown;\n\n        return(\n            <div>\n                <Autosuggest\n                    multiSection={true}\n                    suggestions={suggestions}\n                    onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                    onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                    getSuggestionValue={getSuggestionValue}\n                    getSectionSuggestions={getSectionSuggestions}\n                    renderSuggestion={renderSuggestion}\n                    renderSectionTitle={renderSectionTitle}\n                    inputProps={inputProps}\n                />\n                {enterDown ? <Redirect to={`/catalog/?view=all&term=${this.state.value}`}/> : ''}\n            </div>\n        );\n    }\n\n}\n\nexport default Searchbar;","import React from 'react';\nimport styled from 'styled-components';\nimport {Link} from 'react-router-dom';\n\nconst LoginButton = styled.div`\n    margin-left: 10px; \n    border-radius: 50px;\n    width: 100px;\n    min-width: 20px;\n    text-align: center;\n    margin-top: 2px;\n    height: 28px;\n    background-color: #3C5B6F;\n`\n\nconst Buttontext = styled.div`\n    color: white;\n    padding: 4px;\n    font-family: Raleway, sans-serif;\n    font-weight: 500;\n    height: 100%;\n`\n\nfunction LoginRegister() {\n    return(\n        <Link to='/' style={{textDecoration:'None' , color:'black'}}>\n            <LoginButton>\n                <Buttontext>donate</Buttontext>\n            </LoginButton>\n        </Link>\n    );\n}\n\nexport default LoginRegister;","import React from 'react';\nimport styled from \"styled-components\";\nimport '../css/navbar.css';\nimport '../resources/fonts/fontawesome/css/all.css';\n\nconst RalewayFont = styled.div`\n    font-size: 16px;\n    vertical-align: text-bottom;\n    font-family: Raleway, sans-serif;\n    font-weight: 500;\n    padding-top: 8px;\n    padding-left: 15px;\n    padding-right: 15px;\n`\n\nfunction ExlporeDropdown(){\n    return (\n        <RalewayFont>\n            <div className='title'>explore<i className=\"fas caret fa-caret-down\"/></div>\n            <ul>\n                <li>Stacks</li>\n                <li>Queues</li>\n                <li>Graphs</li>\n                <li>Binary Trees</li>\n            </ul>\n        </RalewayFont>\n    )\n}\n\nexport default ExlporeDropdown;","import React from \"react\";\nimport '../css/navbar.css'\nimport styled from 'styled-components'\nimport HomeButton from \"./homebutton\";\nimport NavigationButton from './navigationbutton';\nimport Searchbar from \"./searchbar\";\nimport LoginRegister from \"./login_register_button\";\nimport ExlporeDropdown from \"./exploredropdown\";\n\nconst NavLayout = styled.div`\n    padding-top: 10px;\n    padding-left: 100px;\n    padding-right: 100px;\n    display: flex;\n    justify-content: flex-start;\n    background-color: #EFE7E2;\n    grid-template-columns: repeat(5,200px);\n    height: 50px;\n`\nconst SearchbarContainer = styled.div`\n    margin-left: auto;\n    margin-right: 10px;\n`\n\n\nfunction Navbar(){\n    return (\n        <nav role='navigation'>\n            <NavLayout>\n                <HomeButton className=\"homeLink\"/>\n                <NavigationButton nextPage=\"about\"/>\n                <NavigationButton nextPage=\"explore\"/>\n                <NavigationButton nextPage=\"everything else\"/>\n                <NavigationButton nextPage=\"premium\"/>\n                <SearchbarContainer>\n                    <Searchbar/>\n                </SearchbarContainer>\n                <LoginRegister/>\n            </NavLayout>\n        </nav>\n    );\n}\n\nexport default Navbar;","import React from 'react';\nimport styled from \"styled-components\";\n\nconst ResponsiveGraphic = styled.div`\n    width: 100%;\n    box-sizing: border-box;\n`\n\nfunction HomeMainGraphic() {\n\n    return(\n        <ResponsiveGraphic>\n            <img style={{width: '100%'}} src={require(\"../../resources/images/logo_waves.svg\")} alt=\"logo on waves\"/>\n        </ResponsiveGraphic>\n    )\n}\n\nexport default HomeMainGraphic;","import React from 'react';\nimport styled from 'styled-components'\nimport HomeMainGraphic from \"./homemaingraphic\";\n\nconst WelcomeHeadline = styled.div`\n    font-family: Ramaraja;\n    font-size: calc(40px + 10 * ((100vw - 1130px) / (550)));\n`\n\nconst WelcomeBody = styled.div`\n    font-family: Raleway;\n    font-size: 16px;\n`\n\nconst MainWrapper = styled.div`\n    padding-top: 1rem;\n    padding-left: 6rem;\n    padding-right: 6rem;\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(451px, 1fr));\n    grid-gap: 2rem;\n`\n\nconst WelcomeMessage =styled.div`\n    box-sizing: border-box;\n`\n\nfunction Mainlanding(){\n    return (\n        <MainWrapper>\n            <HomeMainGraphic/>\n            <WelcomeMessage>\n                <WelcomeHeadline>Welcome to DataStructs.</WelcomeHeadline>\n                <WelcomeBody>\n                    DataStructs is a beautiful, intuitive platform for vizualizing essential data structures and algorithms.\n                    <br/><br/>\n                    Each page includes buttery-smooth animations of common data structures that you can build and use <strong>without\n                    writing a single line of code.</strong><br/><br/>\n                    On top of that, DataStructs provides explanations and automated notes for every animation, so anyone can\n                    build an intuition each approach’s motivating ideas and asymptotic behavior. <br/><br/>\n                    Open the explore menu to browse the collection categorically, click everything to see 💯, or search for a\n                    specific data structure or concept in the search bar.\n                </WelcomeBody>\n            </WelcomeMessage>\n\n        </MainWrapper>\n    )\n}\n\nexport default Mainlanding;","import React from 'react';\nimport Navbar from \"../navbar\";\nimport styled from 'styled-components';\nimport Mainlanding from \"./mainlanding\";\nimport {AnimatePresence, motion} from 'framer-motion';\n\nconst HomeContainer = styled.div`\n    height: 100vh;\n    background-color: #EFE7E2;\n`\n\nfunction Home(props) {\n    return (\n            <HomeContainer>\n                <Navbar/>\n                <motion.div key=\"home\" variants={props.variants} transition={props.transition} initial=\"pageInit\" animate=\"pageIn\" exit=\"pageOut\">\n                    <Mainlanding/>\n                </motion.div>\n            </HomeContainer>\n    );\n}\n\nexport default Home;","import React from 'react';\nimport styled from \"styled-components\";\n\nconst MainGraphic = styled.div`\n\n`\n\nfunction AboutMainGraphic () {\n\n    return (\n        <MainGraphic>\n            <img src={require('../resources/images/darklogotag.svg')} alt='darklogo'/>\n        </MainGraphic>\n    )\n\n}\n\nexport default AboutMainGraphic;\n","import React from 'react';\nimport Navbar from './navbar';\nimport styled from 'styled-components';\nimport '../css/about.css';\nimport AboutMainGraphic from \"./aboutmaingraphic\";\nimport {motion} from \"framer-motion\";\n\nconst AboutContainer = styled.div`\n    height: 100vh;\n    background-color: #EFE7E2;\n`\nconst AboutHeadline = styled.div`\n    font-family: Ramaraja;\n    font-size: 80px;\n`\n\nconst MainWrapper = styled.div`\n    display: grid;\n    grid-gap: 1rem;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    padding-left: 6rem;\n    padding-right: 6rem;\n`\n\nconst AboutMessage = styled.div`\n    grid-column: auto / span 2;\n`\n\nconst AboutBody = styled.div`\n    font-family: Raleway;\n    font-size: 16px;\n    font-weight: 500;\n`\n\nconst GitHubLink = styled.a`\n    text-decoration: none;\n    color: black;\n    hover: \n`\n\nfunction About (props){\n    return(\n        <AboutContainer>\n            <Navbar/>\n            <motion.div key=\"home\" variants={props.variants} transition={props.transition} initial=\"pageInit\" animate=\"pageIn\" exit=\"pageOut\">\n            <MainWrapper>\n                <AboutMessage>\n                    <AboutHeadline>\n                        About\n                    </AboutHeadline>\n                    <AboutBody>\n                        DataStructs is a beautiful, intuitive platform for vizualizing data structures and algorithms.<br/>\n                        <br/>\n                        As of May 2020, DataStructs is built around React, animated with Anime.js, and hosted on AWS S3.\n                        <br/><br/>\n                        <GitHubLink className=\"hoverHighlit\" href='https://github.com/conormccormack/datastructs'>\n                            <i className=\"fab fa-github\"></i> View this project on <strong>Github</strong>\n                        </GitHubLink> @conormccormack/datastructs\n                    </AboutBody>\n                </AboutMessage>\n                <AboutMainGraphic/>\n            </MainWrapper>\n            </motion.div>\n        </AboutContainer>\n    )\n}\n\nexport default About;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Headline = styled.div`\n    font-family: Ramaraja;\n    font-size: 50px;\n    padding-left: 100px;\n    background-color: #EFE7E2;\n`\n\nfunction PageHeadline (props) {\n    return(\n        <Headline>\n            {props.text}\n        </Headline>\n    );\n}\n\nexport default PageHeadline;","import React from 'react';\nimport styled from 'styled-components';\n\nconst TextWrapper = styled.div`\n    text-align: right;\n    padding-right: 100px;\n`\n\nconst Headline = styled.div`\n    font-size: 40;\n    font-family: Ramaraja;\n`\n\nfunction RelatedPagesCard(props) {\n    return (\n        <TextWrapper>\n            <Headline>Look Interesting?</Headline>\n        </TextWrapper>\n    )\n}\n\nexport default RelatedPagesCard;","import React from 'react';\nimport {AnimatePresence, motion} from 'framer-motion';\nimport styled from \"styled-components\";\nimport '../css/bst.css'\n\nconst variants = {\n    position: i => ({\n        scale: 1,\n        x: i * 20,\n        y: i * 20,\n    })\n\n};\n\n//style={{float: 'left'}} exit={{ scale: 0}} initial={{ scale: 0}}\n//                      animate={{ scale: 1, x: props.shift, y: props.shift}} whileHover={{scale: 1.25}}\n\nfunction BSTNode (props) {\n    const id = props.id;\n    return(\n        <motion.div className=\"bstnode\" style={{float: 'left'}} exit={{ scale: 0}} initial={{ scale: 0}}\n                                  animate={{ scale: 1, x: props.shift, y: props.shift}} whileHover={{scale: 1.25}}>\n                {props.data}\n        </motion.div>\n    )\n}\n\nexport default BSTNode;","import React, {useEffect, useState} from \"react\";\nimport styled from 'styled-components';\nimport {AnimatePresence, motion} from 'framer-motion';\nimport Navbar from './navbar';\nimport PageHeadline from './PageHeadline';\nimport RelatedPagesCard from \"./relatedpagescard\";\nimport BinaryTree from \"./binarytree\";\nimport BSTNode from './bstnode';\nimport animejs from \"animejs\";\n\nconst TestSandbox = styled.div`\n    height: 100vh;\n    background-color: #EFE7E2;\n    grid-template-columns: 1fr 1fr;\n    display: grid;\n`\n\nconst PadLeft6rem = styled.div`\n    padding-left: 6rem;\n`\n\n\nconst PadLeft100 = styled.div`\n    padding-left: 100px;\n`\n\nfunction HackAnimation(){\n    const [numberNodes, setNumberNodes] = useState(0);\n    const [inputValue, setInputValue] = useState('');\n    const [removeValue, setRemoveValue] = useState('');\n    const [errorMessage, setErrorMessage] = useState('');\n    const [height, setHeight] = useState(0);\n    const [displayNodes, setDisplayNodes] = useState([]);\n    const [count, setCount] = useState(0);\n    const [tree, setTree] = useState([...Array(2049)].map((x, index) => {\n        const parentId = index > 0 ? Math.floor((index-1)/2) : null;\n        const level = Math.floor(Math.log2(index + 1));\n        return {data: null, id: index, level: level, parent: parentId, left: index * 2 + 1, right: index * 2 + 2 }\n    }));\n\n    const updateTreeIndexInsert = (index, value) =>{\n        setTree(tree.map(node => node.id === index ? {...node, data: value} : node));\n    };\n\n    const recursiveMaxDepth = (max, root) => {\n        if (tree[root].data === null) return max;\n        max = tree[root].level > max ? tree[root].level : max;\n        return Math.max(max, recursiveMaxDepth(max, tree[root].left), recursiveMaxDepth(max, tree[root].right));\n    };\n\n    useEffect(() => {\n        const depth = recursiveMaxDepth(0, 0);\n        setHeight(depth);\n        updateDisplay();\n    },[tree]);\n\n    const insertRecurse = (root, value) => {\n        if (parseInt(value, 10) < parseInt(tree[root].data, 10)) {\n            // Base case: insert new value as leaf node\n            if (tree[tree[root].left].data === null) updateTreeIndexInsert(tree[root].left, value);\n            else insertRecurse(tree[root].left, value);\n        } else {\n            // Base case: insert new value as leaf node\n            if (tree[tree[root].right].data === null) updateTreeIndexInsert(tree[root].right, value);\n            else insertRecurse(tree[root].right, value);\n        }\n    };\n\n    const insertNode = () => {\n        setCount(count => count + 1);\n        setErrorMessage(`Inserting ${inputValue}`);\n        if (tree[0].data === null) {\n            updateTreeIndexInsert(0, inputValue);\n        } else insertRecurse(0, inputValue);\n        setHeight(recursiveMaxDepth(0,0));\n        updateDisplay();\n    };\n\n    const handleInputChange = event => setInputValue(event.target.value);\n\n    const onInsertDown = event => {\n        event.preventDefault();\n        if (inputValue.trim() === '') return;\n        if (isNaN(inputValue)) {\n            setErrorMessage(`Please enter a number (e.g. 27, 3.2)`);\n            return;\n        }\n        insertNode();\n        setInputValue('');\n        setNumberNodes(numberNodes => numberNodes + 1);\n    };\n\n    const handleRemoveChange = event => setRemoveValue(event.target.value);\n\n    const onRemoveDown = event => {\n        event.preventDefault();\n        if (removeValue.trim() === '') return;\n        if (isNaN(removeValue)) {\n                setErrorMessage(`Please enter a number (e.g. 27, 3.2)`);\n                return;\n        }\n        removeNode();\n        setRemoveValue('');\n        updateDisplay();\n    };\n\n    // For every element in subtree, shift up one level\n    const shiftRecurse = (root, basis) => {\n        // Base case: do not shift subtree if it does not exist.\n        if (tree[root].data === null) return;\n        const level = tree[root].level;\n        // If not 0th level, shift.\n        if (level !== 0) {\n            tree[root - basis].data = tree[root].data;\n            tree[root].data = null;\n        }\n        // shift children by basis * 2.\n        shiftRecurse(tree[root].left, basis * 2);\n        shiftRecurse(tree[root].right, basis * 2);\n    };\n\n    const updateTreeIndexRemove = (root) => {\n        setErrorMessage(`Removing ${removeValue}`);\n        const left = tree[root].left;\n        const right = tree[root].right;\n        if (tree[left].data === null && tree[right].data === null){\n            setTree(tree.map(node => node.id === root ? {...node, data: null} : node));\n        } else if (tree[left].data === null){\n            shiftRecurse(right, tree[right].id - tree[root].id);\n        } else if (tree[right].data === null) {\n            shiftRecurse(left, tree[left].id - tree[root].id);\n        } else {\n            const successor = findMin(right);\n            tree[root].data = tree[successor].data;\n            if (tree[tree[successor].right].data !== null){\n                shiftRecurse(tree[successor].right, tree[tree[successor].right].id - successor);\n            } else tree[successor].data = null;\n        }\n        setNumberNodes(numberNodes => numberNodes - 1);\n    };\n\n    const findMin = (root) => {\n        if (tree[tree[root].left].data !== null) return findMin(tree[root].left);\n        else return root;\n    };\n\n    const removeRecurse = (root, value) => {\n        if (tree[root].data === null) {\n            setErrorMessage('Element does not exist in the tree.');\n        } else if (parseInt(value, 10) < parseInt(tree[root].data, 10)) {\n            removeRecurse(tree[root].left, value);\n        } else if (parseInt(value, 10) > parseInt(tree[root].data, 10)){\n            removeRecurse(tree[root].right, value);\n        }\n        else {\n            // Even if current element matches value to remove, we have to check if that value exists\n            // as right child element since we allow for duplicates.\n            if (tree[tree[root].right].data !== value) updateTreeIndexRemove(root);\n            else removeRecurse(tree[root].right, value);\n        }\n    };\n\n    // Compute left-right zero based index of id on its level in the tree.\n    const computeIndexOnLevel = (id, level) => (id + 1 - Math.pow(2,level));\n\n    const updateDisplay = (BST) => {\n        setDisplayNodes(tree.filter(node => node.data !== null).map((node, index) => {\n            const indexOnLevel = computeIndexOnLevel(node.id, node.level);\n            const shift = indexOnLevel % 2 === 0 ? indexOnLevel*(-20) : indexOnLevel * 20;\n            return (\n                <motion.div key={index} className=\"bstnode\" style={{float: 'left'}} exit={{ scale: 0}} initial={{ scale: 0}}\n                animate={{ scale: 1}} whileHover={{scale: 1.25}}>\n                    {node.data}\n                </motion.div>\n                //<BSTNode key={count} data={node.data} shift={shift}/>\n            )\n        }\n        ));\n    };\n\n    const removeNode = () => {\n        if (tree[0].data === null) setErrorMessage('The tree is empty!');\n        else removeRecurse(0, removeValue);\n        setHeight(recursiveMaxDepth(0,0));\n    };\n\n    return (\n        <motion.div exit={{}}>\n            <Navbar/>\n            <PageHeadline text={'Binary Search Trees'} />\n            <TestSandbox>\n                <PadLeft6rem>\n                <BinaryTree BST={tree} displayNodes={displayNodes} height={height}/>\n                </PadLeft6rem>\n                <PadLeft100>\n                    <form onSubmit={onInsertDown}>\n                        <label>\n                            <input type='text' value={inputValue} onChange={handleInputChange}></input> Input\n                        </label>\n                    </form>\n                    <form onSubmit={onRemoveDown}>\n                        <label>\n                            <input type='text' value={removeValue} onChange={handleRemoveChange}></input> Remove\n                        </label>\n                    </form>\n                    <p>Number of Nodes: {numberNodes}</p>\n                    { numberNodes > 0 && <p>Tree Height: {height + 1}</p>}\n                    <p>{errorMessage}</p>\n                </PadLeft100>\n            </TestSandbox>\n        </motion.div>\n    );\n}\n\nexport default HackAnimation;","import React from 'react';\nimport Navbar from './navbar';\nimport queryString from 'query-string';\nimport styled from 'styled-components';\nimport {motion} from \"framer-motion\";\nimport Home from \"./home/home\";\nimport {Link, Route} from \"react-router-dom\";\nimport HackAnimation from \"./hackanimation\";\n\nconst CatalogContainer = styled.div`\n    background-color: #EFE7E2;\n    height: 100vh;\n`\nconst CatalogHeadline = styled.div`\n    font-family: Ramaraja;\n    font-size: 50px;\n    padding-left: 6rem;\n`\n\nconst Results = styled.div`\n    display: grid;\n    padding-left: 6rem;\n    padding-right: 6rem;\n`\n\nconst ResultCategory = styled.div`\n    font-size: 35px;\n    font-family: Raleway;\n    padding-top: 1rem;\n`\n\nconst ResultPage = styled.div`\n    font-size: 18px;\n`\n\nconst Pages = [\n    {\n        category: \"Trees\",\n        queries: [\n            {\n                name: 'AVL Tree',\n                url: 'tree/avl'\n            },\n            {\n                name: 'Binary Search Tree',\n                url: 'tree/bst'\n            },\n            {\n                name: 'Red-Black Tree',\n                url: 'tree/redblack'\n            },\n            {\n                name: 'Splay Tree',\n                url: 'tree/splay'\n            },\n        ]\n    },\n    {\n        category: \"Basics\",\n        queries: [\n            {\n                name: 'Linked List',\n                url: 'linkedlist',\n            },\n            {\n                name: 'Stack',\n                url: 'stack',\n            },\n            {\n                name: 'Queue',\n                url: 'queue',\n            },\n        ],\n    },\n    {\n        category: \"Sorting Algorithms\",\n        queries: [\n            {\n                name: 'Bubble Sort',\n                url: 'sort/bubble',\n            },\n            {\n                name: 'Selection Sort',\n                url: 'sort/selection',\n            },\n            {\n                name: 'Insertion Sort',\n                url: 'sort/insertion',\n            },\n            {\n                name: 'Merge Sort',\n                url: 'sort/merge',\n            },\n            {\n                name: 'Quick Sort',\n                url: 'sort/quick',\n            },\n            {\n                name: 'Radix Sort',\n                url: 'sort/radix',\n            },\n            {\n                name: 'Heap Sort',\n                url: 'sort/heap',\n            },\n        ],\n    },\n    {\n        category: \"Graph Algorithms\",\n        queries: [\n            {\n                name: 'Breadth-First Search',\n                url: 'graph/bfs',\n            },\n            {\n                name: 'Depth-First Search',\n                url: 'graph/dfs',\n            },\n            {\n                name: 'Dijkstra\\'s Algorithm',\n                url: 'graph/dijkstras',\n            },\n            {\n                name: 'Prim\\'s Algorithm',\n                url: 'graph/prims',\n            },\n            {\n                name: 'Topological Sort',\n                url: 'graph/topological',\n            },\n            {\n                name: 'Kruskal\\'s Sort',\n                url: 'graph/kruskals',\n            },\n        ]\n    },\n\n];\n\nconst resultsByCategory = (query, filt, db) => {\n    let results = [];\n    for (let i = 0; i < db.length; i++) {\n        let res = [];\n        if (filt !== 'all' && db[i].category.toLowerCase() !== filt.toLowerCase()) continue;\n        for (let j = 0; j < db[i].queries.length; j++) {\n            if ((filt === 'all' && query === '') || db[i].queries[j].name.toLowerCase().includes(query.toLowerCase())){\n                res.push(db[i].queries[j]);\n            }\n        }\n        if (res.length > 0) results.push({category: db[i].category, results: res});\n    }\n    return resultsToHTML(results);\n};\n\nconst resultsToHTML = (results) => {\n    if (results.length === 0) return ('There are no items matching your search.');\n    else {\n        return results.map(cat =>\n                <div>\n                    <ResultCategory>{cat.category}</ResultCategory>\n                    {cat.results.map(result =>\n                        <ResultPage><Link style={{ color:'black'}} to={`/${result.name}`}>{result.name}</Link></ResultPage>)}\n                </div>\n        )\n    };\n};\n\nfunction Catalog(props){\n    const query = queryString.parse(props.location.search);\n    const SearchResults = resultsByCategory(query.term ? query.term : '', query.view, Pages);\n\n    return(\n        <CatalogContainer>\n            <Navbar/>\n                <motion.div key=\"home\" variants={props.variants} transition={props.transition} initial=\"pageInit\" animate=\"pageIn\" exit=\"pageOut\">\n                {query.term ? <CatalogHeadline>Search results for {query.term}:</CatalogHeadline> :\n                    <CatalogHeadline>This is the catalog filtered by {query.view}.</CatalogHeadline>\n                }\n                <Results>\n                    {SearchResults}\n                </Results>\n            </motion.div>\n        </CatalogContainer>\n    )\n}\n\nexport default Catalog;","import React from 'react';\nimport styled from 'styled-components';\nimport Navbar from \"./navbar\";\nimport {motion} from \"framer-motion\";\n\nconst PremiumContainer = styled.div`\n    background-color: #EFE7E2;\n    height: 100vh;\n`\nconst PremiumHeadline = styled.div`\n    font-family: Ramaraja;\n    font-size: 80px;\n    padding-left: 100px;\n`\n\nfunction Premium(props){\n    return(\n        <PremiumContainer>\n            <Navbar/>\n            <motion.div key=\"home\" variants={props.variants} transition={props.transition} initial=\"pageInit\" animate=\"pageIn\" exit=\"pageOut\">\n             <PremiumHeadline>Premium</PremiumHeadline>\n            </motion.div>\n        </PremiumContainer>\n    )\n}\n\nexport default Premium;","import React, {useEffect, useState} from \"react\";\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport Navbar from \"./navbar\";\n\nconst TestSandbox = styled.div`\n    height: 100vh;\n    background-color: #EFE7E2;\n    grid-template-columns: 1fr 1fr;\n    display: grid;\n`\n\nconst ListWrapper = styled.div`\n    height: 200px; \n    width: 100px;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 20px;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n`\n\nconst DisplayNode = styled.div`\n    background-color: #D8BBFF; \n    border-radius: 50%;\n    margin: 20px;\n    height: 100px; \n    width: 100px;\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst NodeContent = styled.div`\n    text-align: center;\n    vertical-align: middle;\n    font-size: 30px;\n    font-family: Helvetica;\n    color: #FFF;\n`\n\nconst Margin20 = styled.div`\n    margin: 20px;\n`\n\n\n// class Node {\n//     constructor(data, left = null, right = null) {\n//         this.data = data;\n//         this.leftChild = left;\n//         this.rightChild = right;\n//     }\n// }\n\n// const TemplateTree = [\n//     {\n//         data: 10,\n//         left: {\n//             data: 2,\n//             left: null,\n//             right: null,\n//         },\n//         right: {\n//             data: 12,\n//             left: null,\n//             right: null,\n//         },\n//     }\n// ];\n\n\nfunction TestAnimation(){\n    const [numberNodes, setNumberNodes] = useState(0);\n    const [inputValue, setInputValue ] = useState('');\n    const [tree, setTree] = useState({});\n    // const [tree, setTree] = useState(\n    //     {\n    //         data: 10,\n    //         left: {\n    //             data: 8,\n    //             left: {\n    //                 data: 5,\n    //                 left: null,\n    //                 right: null,\n    //             },\n    //             right: {\n    //                 data: 9,\n    //                 left: null,\n    //                 right: null,\n    //             },\n    //         },\n    //         right: {\n    //             data: 16,\n    //             left: {\n    //                 data: 12,\n    //                 left: null,\n    //                 right: null,\n    //             },\n    //             right: {\n    //                 data: 18,\n    //                 left: null,\n    //                 right: null,\n    //             },\n    //         }\n    //     }\n    // );\n\n\n    class Node {\n\n    }\n\n\n    // class BinarySearchTree {\n    //\n    //     insert(data) {\n    //         const newNode = new Node(data);\n    //         this.insertNodeToTree(this.root, newNode);\n    //     }\n    //\n    //     insertNodeToTree(node, newNode){\n    //         if (newNode.data < node.data){\n    //             if (node.left == null) node.left = newNode;\n    //             else this.insertNodeToTree(node.left, newNode);\n    //         } else {\n    //             if (node.right == null) node.right = newNode;\n    //             else this.insertNodeToTree(node.right, newNode);\n    //         }\n    //     }\n    //\n    //     constructor(tree){\n    //         this.data = tree.data;\n    //         if (tree.left != null) this.insertNodeToTree({ data: tree.data, left:  }, tree.left);\n    //         if (tree.right != null) this.insertNodeToTree(this.data, tree.right);\n    //         console.log(tree);\n    //     }\n    //\n    // }\n\n    //0                        0                                  -0\n    //1              1                      2                     -2\n    //2        3          4            5             6            -4\n    //3    7    8      9     10      11     12       13      14   -8\n    //4 15 16 17 18  19 20  21 22   23 24  25 26  27 28    29 30  -16\n    //\n    // 2^(n)\n    //\n    //0                        0                                  -0\n    //1              1                                            -1\n    //2        3          4                                       -2\n    //3    7    8      9     10                                   -4\n    //4 15 16 17 18  19 20  21 22                                 -8\n    //\n    //                         0\n    //                     1        2\n    //                3      4      5    6\n    //             7   8   9  10  11 12 13 14\n    //\n    //                  0\n    //            1\n    //         3\n    //       7   8\n    //\n    //                  0\n    //             1         2\n    //          3    4     5   6\n    //\n    //  find left child:  2n + 1\n    //  find right child: 2n + 2\n    //  find parent:      n-1 / 2\n\n\n\n    const insertNode = () => {\n        if (Object.keys(tree).length === 0){\n            setTree({ data: inputValue, left: null, right: null });\n        } else {\n\n        }\n\n\n        // let newTree = new BinarySearchTree(tree);\n        // newTree.insert(inputValue);\n        // setTree(newTree);\n\n        // let newTree = tree;\n        // console.log(newTree);\n        // if (inputValue >= newTree.data){\n        //     // Base case: create leaf node.\n        //     if (newTree.right == null){\n        //         newTree.right = {\n        //             data: inputValue,\n        //             left: null,\n        //             right: null,\n        //         };\n        //         return newTree;\n        //     }\n        //     else {\n        //         return insertNode(newTree.right);\n        //     }\n        // } else {\n        //     // Base case: create leaf node.\n        //     if (newTree.left == null){\n        //         newTree.left = {\n        //             data: inputValue,\n        //             left: null,\n        //             right: null,\n        //         };\n        //         return newTree;\n        //     } else {\n        //         return insertNode(newTree.right);\n        //     }\n        // }\n    };\n\n\n    const onInsertDown = event => {\n        event.preventDefault();\n        insertNode();\n        setNumberNodes(numberNodes => numberNodes + 1);\n    };\n\n    const handleChange = event => setInputValue(parseInt(event.target.value));\n\n    return (\n        <div>\n            <Navbar/>\n            <TestSandbox>\n                <ListWrapper>\n                    <Margin20>\n                        { Object.keys(tree).length > 0 &&  BinaryTree(tree)}\n                    </Margin20>\n                </ListWrapper>\n                <form style={{paddingLeft:'100px'}} onSubmit={onInsertDown}>\n                    <label>\n                        <input type='text' value={inputValue} onChange={handleChange}></input> Input\n                    </label>\n                    <p>Number of Nodes: {numberNodes}</p>\n                </form>\n            </TestSandbox>\n        </div>\n    )\n}\n\n// Recursion\nfunction BinaryTree (tree) {\n    return(\n        <div>\n            <ul>\n                <Margin20>\n                    <motion.div initial={{scale: 0}} animate={{scale: 1}} whileHover={{scale: 1.5}}>\n                        <DisplayNode>\n                            <NodeContent>{tree.data}</NodeContent>\n                        </DisplayNode>\n                    </motion.div>\n                </Margin20>\n                { tree.left && BinaryTree(tree.left) }\n                { tree.right && BinaryTree(tree.right) }\n            </ul>\n        </div>\n    )\n}\n\nexport default TestAnimation;","/* Summary:\n*  The following is a React component that will never update after it has mounted.\n*  This allows for the use of vanilla JavaScript to directly manipulate the DOM.\n*  The binary tree is initialized as part of the component state so that the component\n*  can readily access the tree data. The tree is maintained with vanilla JavaScript, however,\n*  and is animated using Anime.js.\n*\n*  The animation is implemented as an Anime timeline, which is built with an\n*  in-order traversal of the nodes of the tree followed by its edges. The X position\n*  of each node and its edges is based on size of the container and the immediate \n*  successors of each node. There is a fixed distance between each node and its pecessor,\n*  defined by HORIZONTAL_SPACING. Somewhat similarly, each level of the tree is seperated\n*  by the VERTICAL_SPACING constant. \n*/\n\nimport React, { Component } from 'react';\nimport anime, { random } from 'animejs';\nimport '../css/bst.css';\nimport styled from 'styled-components';\n\nconst PageWrapper = styled.div`\n    padding-left: 6rem;\n    padding-right: 6rem;\n    padding-top: 2rem;\n    height: 80vh;\n    display: grid;\n    grid-template-columns: 3fr 1fr;\n`\nconst Controls = styled.div`\n    margin-left: auto;\n`\nconst NodeContainer = styled.div`\n    height: 100%;\n    width: 100%\n`\n\nconst HORIZONTAL_SPACING = 40;\nconst NODE_RADIUS = 30;\nconst VERTICAL_SPACING = 70;\nconst NUM_STARTING_NODE = 11;\nlet TRAVERSE_DURATION = 500;\nlet shift_x;\nlet resizeTimer;\nlet traverseCount = 0;\nlet traverseOn = true;\nlet allowDuplicate = false; \n\nlet formatTimeline = anime.timeline({\n    autoplay: false,\n    \n});\n\nclass Node {\n    constructor (value, level, id){\n        this.value = value;\n        this.left = null;\n        this.right = null;\n        this.level = level;\n        this.parent = null;\n        this.id = id;\n        this.line = null;\n    }\n}\n\nclass BinarySearchTree {\n    constructor() {\n        this.root = null;\n        this.numActiveNodes = 0;\n        /* Map which stores the next x position of each node. Used to calculate\n        ** where points of edges should move before the animation is executed */\n        this.x_distances = new Map();\n    }\n    updateLevels(root, level){\n        root.level = level;\n        if (root.right !== null) this.updateLevels(root.right, level + 1);\n        if (root.left !== null) this.updateLevels(root.left, level + 1 );\n    }\n    getTreeHeight(node, total){ \n        const left = node.left !== null ? this.getTreeHeight(node.left, total) + 1 : 0;\n        const right = node.right !== null ? this.getTreeHeight(node.right, total) + 1 : 0;\n        return total + Math.max(left, right);\n    }\n\n    // Insert node into tree and update heights map.\n    insert(value, count) {\n        var newNode = new Node (value, 0, count);\n        if (this.root === null) {\n            this.root = newNode;\n            addMessageToLog(`Tree empty: inserting ${value} as root.`, 'end');\n        }\n        else { \n            newNode.level += 1;\n            this.insertNode(this.root, newNode);\n        }\n        return newNode;\n    }\n\n    insertNode(root, newNode){  \n        if (traverseOn) addTraverseStep(root, 0);\n        if (newNode.value < root.value){\n            if (root.left !== null) {\n                newNode.level = newNode.level + 1;\n                addMessageToLog(`${newNode.value} < ${root.value}, search left.`);\n                this.insertNode(root.left, newNode);\n            } else { \n                root.left = newNode; \n                newNode.parent = root;\n                addMessageToLog(`${newNode.value} < ${root.value}, insert as left leaf.`, 'end');\n            }\n        } else if (newNode.value >= root.value){\n            if (root.right !== null) {\n                newNode.level = newNode.level + 1;\n                addMessageToLog(`${newNode.value} >= ${root.value}, search right.`);\n                this.insertNode(root.right, newNode);\n            } else { \n                root.right = newNode; \n                newNode.parent = root;\n                addMessageToLog(`${newNode.value} >= ${root.value}, insert as right leaf.`, 'end');\n            }\n        }\n    }\n\n    removeRecurse(root, value){\n        if (root !== null && traverseOn) addTraverseStep(root, 0);\n        if (root === null) {\n            addMessageToLog(`${value} not found.`, 'end');\n            setErrorMessage(`${value} is not in the tree!`);\n            return false;\n        } else if (value < root.value) {\n            addMessageToLog(`${value} < ${root.value}, search left.`);\n            return this.removeRecurse(root.left, value);\n        } else if (value > root.value) {\n            addMessageToLog(`${value} >= ${root.value}, search right.`);\n            return this.removeRecurse(root.right, value);\n        } else {\n            this.deleteNode(root);\n            addMessageToLog(`Found ${value}: removing ${value} from tree.`, 'end');\n            setErrorMessage('');\n            return true;\n        }  \n    }\n\n    deleteNode(node){\n        let child_of_type = (node.parent !== null) ? (node.parent.right === node) ? 'right' : 'left' : 'root';\n        let replacement = (node.left === null && node.right === null) ? null : (node.left === null) ? node.right : node.left;\n        if (node.left !== null && node.right !== null){\n            const swap = this.findLeftmost(node.right);\n            addTraverseStep(swap, -1);\n            node.value = swap.value;\n            formatTimeline.add({\n                targets: document.getElementById(`frontnode${node.id}`),\n                innerHTML: node.value,\n                easing: 'easeOutCubic',\n                round: 1,\n                duration: 500,\n            }, (traverseCount - 1) * TRAVERSE_DURATION)\n            this.deleteNode(swap);\n        } else {\n            if (child_of_type !== 'root') removeElementFromDOM(`path${node.id}`);\n            else if (replacement) removeElementFromDOM(`path${replacement.id}`);\n\n            if (child_of_type === 'right') node.parent.right = replacement;\n            else if (child_of_type === 'left') node.parent.left = replacement;\n            else this.root = replacement;\n            if (replacement) replacement.parent = node.parent;\n            removeElementFromDOM(`node${node.id}`);\n        }\n\n        if (this.root) this.updateLevels(this.root, 0);\n    }\n\n    findLeftmost(root){\n        return root.left === null ? root : this.findLeftmost(root.left);\n    }\n}\n\nfunction addTraverseStep(node, shift_order){\n    formatTimeline.add({\n        targets: `#node${node.id}`,\n        keyframes: [\n            { scale: 1.05, translateX: `-=${NODE_RADIUS}`, translateY: `-=${NODE_RADIUS*.05}`},\n            { scale: 1, translateX: `+=${NODE_RADIUS}`, translateY: `+=${NODE_RADIUS*.05}`},\n        ],\n        easing: 'easeInOutBack',\n        duration: TRAVERSE_DURATION,\n    }, (traverseCount + shift_order) * TRAVERSE_DURATION);\n    formatTimeline.add({\n        targets: `#frontnode${node.id}`,\n        keyframes: [\n            { background: '#3C5B6F' },\n            { background: ' ' },\n        ],\n        easing: 'easeInOutBack',\n        duration: TRAVERSE_DURATION,\n    }, (traverseCount + shift_order) * TRAVERSE_DURATION);\n    if (node.parent !== null && shift_order === 0) {\n        formatTimeline.add({\n            targets: `#path${node.id}`,\n            keyframes: [\n                { stroke: '#3C5B6F' },\n                { stroke: '#DEAAFF' },\n            ],\n            duration: TRAVERSE_DURATION,\n            easing: 'easeInOutBack',\n        }, traverseCount * TRAVERSE_DURATION - (TRAVERSE_DURATION/2));\n    }\n    traverseCount += 1;\n}\n\nfunction removeElementFromDOM(id) {    \n    var toRemove = document.getElementById(id);\n    if (id === null) return;\n    formatTimeline.add({\n        targets: toRemove,\n        opacity: 0,\n        duration: 600,\n        easing: 'easeOutExpo',\n        delay: id.includes('line') ? 150 : 0,\n        complete: function(anim){\n            toRemove.remove();\n        },\n    }, traverseCount * TRAVERSE_DURATION);\n}\n\nfunction addNodeToDOM(value, count) {\n    let node = document.createElement(\"div\");\n    node.classList.add('bstnode')\n    node.setAttribute('id', `node${count}`);\n    node.setAttribute('style', `float: left;`);\n    let frontHighlight = document.createElement('div');\n    frontHighlight.classList.add('front-node');\n    frontHighlight.setAttribute('id', `frontnode${count}`);\n    let text = document.createTextNode(value);\n    frontHighlight.appendChild(text);\n    node.appendChild(frontHighlight);\n    document.getElementById(\"nodecontainer\").appendChild(node);\n}\n\n// Given an element selector, return the pixel midpoint of its width dimension.\nfunction getWidthMidpoint(selector) {\n    return (selector.getBoundingClientRect().width / 2);\n}\n\n// Returns length of in-order traversal from smallest element to root.\nfunction size(root){\n    if (root === null) return 0;     \n    const left = root.left ? size(root.left) : 0;\n    const right = root.right ? size(root.right) : 0;\n    return left + right + 1;\n}\n\nfunction addMessageToLog(message, options){\n    formatTimeline.add({\n        duration: TRAVERSE_DURATION,\n        begin: function (){\n            let p = document.createElement('div');\n            p.setAttribute('className', 'log');\n            p.classList.add('log');\n            if (options) {\n                if (options === 'end') p.classList.add('log-border-bottom');\n            }\n            p.appendChild(document.createTextNode(message));\n            let logs = document.getElementById('logs');\n            logs.appendChild(p);\n            logs.scrollTop = logs.scrollHeight;\n        }\n    }, traverseOn ? (traverseCount - 1) * TRAVERSE_DURATION : 0);\n    formatTimeline.add({\n        duration: TRAVERSE_DURATION,\n\n    }, traverseOn ? (traverseCount - 1) * TRAVERSE_DURATION : 0);\n}\n\nfunction setErrorMessage(message){\n    document.getElementById('error-message').innerHTML = message;\n}\n\nasync function formatBinaryTree(tree){\n    toggleFormDisable();\n    buildNodeTimeline(tree.root, tree);\n    buildEdgeTimeline(tree.root, tree);\n    formatTimeline.play();\n    await formatTimeline.finished;\n    toggleFormDisable();\n    formatTimeline = anime.timeline({});\n    return;\n}\n\nfunction buildEdgeTimeline(root, tree){\n    if (root.left !== null) buildEdgeTimeline(root.left, tree);\n    if (root.parent !== null){\n        const x1 = tree.x_distances.get(`node${root.parent.id}`); \n        const y1 = root.parent.level * VERTICAL_SPACING + NODE_RADIUS;\n        const x2 = tree.x_distances.get(`node${root.id}`);\n        const y2 = root.level * VERTICAL_SPACING + NODE_RADIUS;\n        const curr_opacity = parseFloat(document.getElementById(`path${root.id}`).getAttribute('opacity'));\n        const isNew = curr_opacity > 0.7 ? false : true;\n        formatTimeline.add({\n            targets: `#path${root.id}`,\n            d: `M ${x1}, ${y1} L ${x2}, ${y2}`,\n            opacity: { value: '1.0', easing: 'easeInSine', delay: isNew ? 600: 0, duration: isNew ? 200 : 0 },\n            stroke: { value: '#DEAAFF', delay: isNew ? 800 : 0 },\n            easing: 'easeInOutExpo',\n        }, traverseCount * TRAVERSE_DURATION);\n    }\n    if (root.right !== null) buildEdgeTimeline(root.right, tree);\n}\n\nfunction buildNodeTimeline(root, tree){\n    if (root.left !== null) buildNodeTimeline(root.left, tree);\n    const node = document.getElementById(`node${root.id}`);\n    const x = shift_x - NODE_RADIUS;\n    const isNew = root.parent !== null && root.line === null ? true : false;\n    tree.x_distances.set(`node${root.id}`, x );\n    root.parent !== null && root.line === null && addPathToDom(root);\n    root.line = root.line === null && `line${root.id}`;\n    if (isNew){\n        formatTimeline.add({\n            targets: `#node${root.id}`,\n            marginLeft: { value: `${-node.getBoundingClientRect().width}px`, duration: 0 },\n            keyframes: [\n                { scale: isNew ? 0 : 1, duration: 0 },\n                { translateX: isNew ? 0 : shift_x, translateY: root.level * VERTICAL_SPACING,  scale: 1, duration: 800 },\n                { translateX: shift_x, translateY: root.level * VERTICAL_SPACING, delay: 200, duration: 800 }\n            ],\n            easing: 'easeInOutExpo',\n        }, traverseCount * TRAVERSE_DURATION);\n    } else {\n        formatTimeline.add({\n            targets: `#node${root.id}`,\n            marginLeft: { value: `${-node.getBoundingClientRect().width}px`, duration: 0 },\n            keyframes: [\n                { scale: isNew ? 0 : 1, duration: 0 },\n                { translateX: isNew ? 0 : shift_x, translateY: root.level * VERTICAL_SPACING,  scale: 1, duration: 800 },\n                { translateX: shift_x, translateY: root.level * VERTICAL_SPACING, delay: 200, duration: 800 }\n            ],\n            easing: 'easeInOutExpo',\n        }, traverseCount * TRAVERSE_DURATION);\n    }\n\n    shift_x += HORIZONTAL_SPACING;\n\n    if (root.right !== null) buildNodeTimeline(root.right, tree);\n}\n\n// Given child node, create path from child to parent, add to DOM.\nfunction addPathToDom(child){\n    if (child.parent === null) return;\n    let svg = document.getElementById('svg-line');\n    const parent_selector = document.getElementById(`node${child.parent.id}`);\n    const child_selector = document.getElementById(`node${child.id}`);\n    const container = document.getElementById(`nodecontainer`);\n\n    const x1 = (parent_selector.getBoundingClientRect().x + parent_selector.getBoundingClientRect().right)/2 - container.getBoundingClientRect().x;\n    const y1 =  parent_selector.getBoundingClientRect().bottom - container.getBoundingClientRect().y - NODE_RADIUS;\n    const x2 = (child_selector.getBoundingClientRect().x + child_selector.getBoundingClientRect().right)/2 - container.getBoundingClientRect().x;\n    const y2 = child_selector.getBoundingClientRect().y - container.getBoundingClientRect().y + NODE_RADIUS;\n\n    let path = document.createElementNS('http://www.w3.org/2000/svg','path');\n    path.setAttribute('id', `path${child.id}`);\n    path.setAttribute('d', `M ${x1}, ${y1} L ${x2}, ${y2} `);\n    path.setAttribute('stroke', '#3C5B6F');\n    path.setAttribute('stroke-width', '3px');\n    path.setAttribute('opacity', '0.0');\n    svg.appendChild(path);\n}\n\nfunction toggleFormDisable(){\n    document.getElementById('input-field').disabled =  !document.getElementById('input-field').disabled;\n    document.getElementById('remove-field').disabled = !document.getElementById('remove-field').disabled;\n    document.getElementById('input-button').disabled = !document.getElementById('input-button').disabled;\n    document.getElementById('remove-button').disabled = !document.getElementById('remove-button').disabled;\n    document.getElementById('multi-field').disabled = !document.getElementById('multi-field').disabled;\n    document.getElementById('multi-button').disabled = !document.getElementById('multi-button').disabled;\n}\n\nclass AnimeTest extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            inputValue: '',\n            removeValue: '',\n            bst: new BinarySearchTree(),\n            multiInput: '',\n            count: 0,\n        };\n        this.handleInputSubmit = this.handleInputSubmit.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleRemoveChange = this.handleRemoveChange.bind(this);\n        this.handleRemoveSubmit = this.handleRemoveSubmit.bind(this); \n        this.toggleAllowDuplicate = this.toggleAllowDuplicate.bind(this);\n        this.calculateShiftX = this.calculateShiftX.bind(this);\n        this.onResize = this.onResize.bind(this);\n        this.updateActiveNodeCount = this.updateActiveNodeCount.bind(this);\n        this.handleMultiSubmit = this.handleMultiSubmit.bind(this);\n        this.handleMultiChange = this.handleMultiChange.bind(this);\n        this.parseMulti = this.parseMulti.bind(this);\n    }\n\n    updateActiveNodeCount(){\n        document.getElementById('active-node-count').innerHTML = `Number of Nodes: <strong>${this.state.bst.numActiveNodes}</strong>`;\n    }\n\n    updateTreeHeight(){\n        document.getElementById('tree-height').innerHTML = \n        `Tree Height: <strong>${this.state.bst.root !== null ? this.state.bst.getTreeHeight(this.state.bst.root, 0) + 1 : 0}</strong>`;\n    }\n\n    handleInputChange(event) {\n        this.setState({ inputValue: parseFloat(event.target.value) });\n    }\n\n    handleRemoveChange(event) {\n        this.setState({ removeValue: parseFloat(event.target.value) });\n    }\n    \n    handleMultiChange(event){\n        this.setState({ multiInput: event.target.value});\n    }\n\n    async handleInputSubmit(event) {\n        event.preventDefault();\n        if (this.state.inputValue === '' || isNaN(this.state.inputValue)) {\n            setErrorMessage('<p>Please enter an number (e.g. 32, 2.7).<p>')\n            return;\n        }\n        setErrorMessage('');\n        this.state.bst.insert(this.state.inputValue, this.state.count);\n        addNodeToDOM(this.state.inputValue, this.state.count);\n        shift_x = this.calculateShiftX(document.getElementById('nodecontainer'));\n        await formatBinaryTree(this.state.bst);\n        traverseCount = 0;\n        this.setState({ count: this.state.count + 1, inputValue: '' });\n        this.state.bst.numActiveNodes += 1;\n        this.updateActiveNodeCount();\n        this.updateTreeHeight();\n        document.getElementById('input-field').focus();\n    }\n\n    async handleRemoveSubmit(event) {\n        event.preventDefault();\n        if (this.state.removeValue === '' || isNaN(this.state.removeValue)) {\n            setErrorMessage('<p>Please enter an number (e.g. 32, 2.7).<p>');\n            return;\n        }\n        const success = this.state.bst.removeRecurse(this.state.bst.root, this.state.removeValue);\n        if (this.state.bst.root !== null) {\n            shift_x = this.calculateShiftX(document.getElementById('nodecontainer'));\n            await formatBinaryTree(this.state.bst);\n        };\n        if (success) this.state.bst.numActiveNodes -= 1;\n        this.setState({removeValue: ''});\n        this.updateActiveNodeCount();\n        this.updateTreeHeight();\n        document.getElementById('remove-field').focus();\n        traverseCount = 0;\n    }\n\n    parseMulti(){\n        const multiInput = this.state.multiInput.toLowerCase();\n        let instructions = [];\n        for (let idx = 0; idx < multiInput.length; idx++){\n            if (!isNaN(multiInput[idx]) && multiInput[idx] !== ' ' && multiInput[idx] !== '') {\n                \n            } else if (multiInput[idx] === 'r'){\n\n            }  else if (multiInput[idx] === 'a' || (multiInput[idx] === 'd')){\n                const open_brack = multiInput.substring(idx).indexOf('[') + idx;\n                const close_brack = multiInput.substring(idx).indexOf(']') + idx;\n\n                console.log(multiInput.substring(idx + 1, idx + 3));\n                if (open_brack !== -1 && close_brack === -1) throw 'Expected ]';\n                else if (open_brack === -1 && close_brack !== -1) throw 'Expected ['; \n                else if (open_brack === -1 && close_brack === -1) throw 'Expected [...]';\n                else if (multiInput.substring(idx + 1, idx + 3) !== 'dd' && multiInput.substring(idx + 1, idx + 3) !== 'el') \n                    throw 'Unknown command';\n                \n                if (open_brack !== -1 && close_brack !== -1){\n                    let add_group = multiInput.substring(open_brack + 1, close_brack).split(/\\s*(\\s|,)\\s*/)\n                            .filter(el => !isNaN(parseFloat(el)))\n                                .map(el => multiInput[idx] === 'a' ? `${el}` : `d${el}`);\n                    instructions = instructions.concat(add_group);\n                }\n                idx = close_brack;\n            }\n            \n        }\n        return instructions;\n    }\n\n    async handleMultiSubmit(event){\n        event.preventDefault();\n        const multiInput = this.state.multiInput\n        var newNodes;\n\n        try { newNodes = this.parseMulti();\n        } catch (error){\n            console.log({error});\n        }\n        \n        for (const value of newNodes){\n            if (value.toString().includes('d')) {\n                const success = this.state.bst.removeRecurse(this.state.bst.root, parseFloat(value.toString().substring(1)));\n                if (success) this.state.bst.numActiveNodes -= 1;\n            }\n            else {\n                this.state.bst.insert(parseFloat(value), this.state.count);\n                addNodeToDOM(value, this.state.count);\n                this.state.bst.numActiveNodes += 1;\n                this.setState({count: this.state.count + 1});\n            }\n            shift_x = this.calculateShiftX(document.getElementById('nodecontainer'));\n            await formatBinaryTree(this.state.bst);\n            traverseCount = 0;\n            this.updateActiveNodeCount();\n            this.updateTreeHeight();\n        }\n        this.setState({multiInput: ''});\n        document.getElementById('multi-field').focus();\n    }\n\n    calculateShiftX(nodeContainer) {\n        const rightOverflow = Math.min(0, getWidthMidpoint(nodeContainer) - size(this.state.bst.root.right) * HORIZONTAL_SPACING - NODE_RADIUS);\n        return Math.max(NODE_RADIUS, getWidthMidpoint(nodeContainer) - size(this.state.bst.root.left) * HORIZONTAL_SPACING + rightOverflow);\n    }\n\n\n    componentDidMount(){\n        window.addEventListener('resize', this.onResize);\n        shift_x = getWidthMidpoint(document.getElementById('nodecontainer'));\n        this.toggleTraverseOn();\n        const randomTree = [...Array(NUM_STARTING_NODE)].map(() => Math.floor(Math.random() * 999 + 1));\n        const sortedTree = Array.from(randomTree).sort();\n        const median = sortedTree[Math.floor(sortedTree.length/2)];\n        const medianIndex = randomTree.indexOf(median);\n        randomTree[medianIndex] = randomTree[0];\n        randomTree[0] = median;\n        randomTree.forEach( (value, index) => {\n            this.state.bst.insert(parseFloat(value), this.state.count + index);\n            addNodeToDOM(value, this.state.count + index);\n            shift_x = this.calculateShiftX(document.getElementById('nodecontainer'));\n            this.state.bst.numActiveNodes += 1;\n        });\n        shift_x = this.calculateShiftX(document.getElementById('nodecontainer'));\n        formatBinaryTree(this.state.bst);\n        this.updateActiveNodeCount();\n        this.updateTreeHeight();\n        this.setState({count: this.state.count + randomTree.length});\n        this.toggleTraverseOn();\n    }\n    \n    toggleTraverseOn(){ traverseOn = !traverseOn; }\n    toggleAllowDuplicate() { allowDuplicate = !allowDuplicate; }\n\n    handleIntervalChange(event){ TRAVERSE_DURATION = 1500 - event.target.value; }\n\n    onResize(){\n        if (this.state.bst.root === null) return;\n        clearTimeout(resizeTimer);\n        shift_x = this.calculateShiftX(document.getElementById('nodecontainer'));\n        resizeTimer = setTimeout(formatBinaryTree(this.state.bst), 3000 );\n    }\n\n    render(){ \n        return(\n            <PageWrapper id=\"pagewrapper\">\n                <div>\n                    <NodeContainer id=\"nodecontainer\" >\n                        <svg className=\"linecontainer\" id=\"svg-line\" />                    \n                    </NodeContainer>\n                </div>\n                <div>    \n                    <div className='tree-info' id='active-node-count'/>\n                    <div className='tree-info' id='tree-height'/>\n                    <form id='input-form' onSubmit={this.handleInputSubmit} className='controlForm'>\n                        <label>\n                            <input className='field' type=\"number\" value={this.state.inputValue} id=\"input-field\" onChange={this.handleInputChange}/> \n                            <button id='input-button' onClick={this.handleInputSubmit} className='inputButton'>Input</button>\n                        </label>\n                    </form>\n                    <form id='remove-form' onSubmit={this.handleRemoveSubmit} className='controlForm'>\n                        <label>\n                            <input className='field' type=\"number\" value={this.state.removeValue} id=\"remove-field\" onChange={this.handleRemoveChange}/> \n                            <button id='remove-button' onClick={this.handleRemoveSubmit} className='removeButton'>Remove</button>\n                        </label>\n                    </form>\n                    <div className='tree-info'> \n                        <label >\n                            Animate traversal\n                            <input type='checkbox' defaultChecked='on' id='traverse-checkbox' onChange={this.toggleTraverseOn}/>\n                        </label>\n                    </div>\n                    <label>\n                        Traversal Speed\n                        <input className='tree-info' type='range' defaultValue='1000' min='0' max='1400' id='traverse-interval-slider' onChange={this.handleIntervalChange}/>\n                    </label>\n                    <form id='multi-input' onSubmit={this.handleMultiSubmit}>\n                        <textarea className='multi-input tree-info' rows='5' value={this.state.multiInput} id='multi-field' onChange={this.handleMultiChange}/>\n                        <button id='multi-button' type='submit' />\n                    </form> \n                    <div className='tree-info' id='logs'/>\n                    <div className='tree-info' id='error-message'/>\n                </div>\n            </PageWrapper>\n        );\n    }\n}\n\nexport default AnimeTest;","import React, { useRef, useEffect, useState } from 'react';\nimport { gsap } from 'gsap';\nimport '../css/bst.css';\nimport styled from 'styled-components';\nimport { Transition } from 'react-transition-group';\n\nconst RefNode = React.forwardRef((props, ref) => {\n    return(\n        <Transition \n            key={props.key}\n            mountOnEnter\n            unmountOnExit\n            addEndListener={(node, done) => {\n                gsap.from(\n                    node,\n                    .5,\n                    {\n                        scale: 0, \n                        ease: 'back.out(2)',\n                        onComplete: done,\n                    }\n                )\n            }}\n        >   \n       <div id={`node${props.node.id}`} style={{ marginLeft: '-60px' }} ref={ref} className='bstnode'>{props.node.value}</div>\n       </Transition>\n    )\n});\n\nexport default RefNode;","import React, { useRef, useEffect, useState } from 'react';\nimport { gsap } from 'gsap';\nimport '../css/bst.css';\nimport styled from 'styled-components';\nimport RefNode from './refnode';\nimport { TransitionGroup, Transition } from 'react-transition-group';\n\nconst TreeContainer = styled.div`\n    margin-left: 60px;\n    display: flex;\n    justify-content: center;\n`\n\nconst PageContainer = styled.div`\n    display: grid;\n    grid-template-columns: 2fr 1fr;\n    height: 100vh;\n    width: 100vw;\n    padding: 2rem;\n    background: #EFE7E2;\n`\n\nconst ControlContainer = styled.div`   \n`\n\nclass Node {\n    constructor (value, level, id){\n        this.value = value;\n        this.left = null;\n        this.right = null;\n        this.level = level;\n        this.parent = null;\n        this.id = id;\n        this.line = null;\n        this.isNew = true;\n    }\n}\n\nclass BinarySearchTree {\n    constructor() {\n        this.root = null;\n    }\n    updateLevels(root, level){\n        root.level = level;\n        if (root.right !== null) this.updateLevels(root.right, level + 1);\n        if (root.left !== null) this.updateLevels(root.left, level + 1 );\n    }\n    getTreeHeight(node, total){ \n        const left = node.left !== null ? this.getTreeHeight(node.left, total) + 1 : 0;\n        const right = node.right !== null ? this.getTreeHeight(node.right, total) + 1 : 0;\n        return total + Math.max(left, right);\n    }\n    \n    getInOrderArray(node, array){\n        if (!node) return [];\n        if (node.left !== null) this.getInOrderArray (node.left, array);\n        array.push(node);\n        if (node.right !== null) this.getInOrderArray (node.right, array);\n        return array;\n    }\n\n    subTreeSize(node){\n        if (node === null) return 0;     \n        const left = node.left ? this.subTreeSize(node.left) : 0;\n        const right = node.right ? this.subTreeSize(node.right) : 0;\n        return left + right + 1;\n    }\n\n    insert(value, count) {\n        var newNode = new Node (value, 0, count);\n        if (this.root === null) {\n            this.root = newNode;\n        }\n        else { \n            newNode.level += 1;\n            this.insertNode(this.root, newNode);\n        }\n        return newNode;\n    }\n\n    insertNode(root, newNode){  \n        if (newNode.value < root.value){\n            if (root.left !== null) {\n                newNode.level = newNode.level + 1;\n                this.insertNode(root.left, newNode);\n            } else { \n                root.left = newNode; \n                newNode.parent = root;\n            }\n        } else if (newNode.value >= root.value){\n            if (root.right !== null) {\n                newNode.level = newNode.level + 1;\n                this.insertNode(root.right, newNode);\n            } else { \n                root.right = newNode; \n                newNode.parent = root;\n            }\n        }\n    }\n\n    removeRecurse(root, value){\n        if (root === null) {\n            return false;\n        } else if (value < root.value) {\n            return this.removeRecurse(root.left, value);\n        } else if (value > root.value) {\n            return this.removeRecurse(root.right, value);\n        } else {\n            this.deleteNode(root);\n            return true;\n        }  \n    }\n\n    deleteNode(node){\n        let child_of_type = (node.parent !== null) ? (node.parent.right === node) ? 'right' : 'left' : 'root';\n        let replacement = (node.left === null && node.right === null) ? null : (node.left === null) ? node.right : node.left;\n        if (node.left !== null && node.right !== null){\n            const swap = this.findLeftmost(node.right);\n            this.deleteNode(swap);\n        } else {\n            if (child_of_type !== 'root') {}\n            else if (replacement) {}\n\n            if (child_of_type === 'right') node.parent.right = replacement;\n            else if (child_of_type === 'left') node.parent.left = replacement;\n            else this.root = replacement;\n            if (replacement) replacement.parent = node.parent;\n        }\n\n        if (this.root) this.updateLevels(this.root, 0);\n    }\n\n    findLeftmost(root){\n        return root.left === null ? root : this.findLeftmost(root.left);\n    }\n}\n\n/* \n** It's important to separate animations that insert/delete from tree since\n** we need to first animate removing nodes before they are allowed to leave the DOM.\n\n** First, we handle actually inserting/removing the data from the data structure.\n** Then, insert/removeCount are changed, calling the corresponding useEffect hook.\n*/\n\nconst Reftree = React.memo(() => {\n    const nodeRef = useRef([]);\n    const bst = useRef(new BinarySearchTree);\n    const [ nodeData, setNodeData ] = useState([]);\n    \n    const [ removeCount, setRemoveCount ] = useState(0);\n    const [ insertCount, setInsertCount ] = useState(0);\n    const [ count, setCount ] = useState(0);\n    \n    const [ height, setHeight ] = useState(-1);\n\n    const [ inputValue, setInputValue ] = useState('');\n    const [ removeValue, setRemoveValue ] = useState('');\n    const [ message, setMessage ] = useState('');\n\n    const HORIZONTAL_SPACING = 50;\n    const VERTICAL_SPACING = 80;\n    const NODE_RADIUS = 30;\n\n    useEffect(() => {        \n        if (bst.current.root === null) return;\n        setHeight(bst.current.getTreeHeight(bst.current.root, 0));\n        console.log(nodeData, nodeRef);\n        for (let i = 0; i < nodeData.length; i++){\n            gsap.to(\n                nodeRef.current[i],\n                .5,\n                { delay: nodeData[i].isNew ? .4 : 0, y: (nodeData[i].level) * VERTICAL_SPACING , x: HORIZONTAL_SPACING * i - (bst.current.subTreeSize(bst.current.root.left) * HORIZONTAL_SPACING)},\n            );\n            if (nodeData[i].isNew){\n                gsap.from(\n                    nodeRef.current[i],\n                    .4,\n                    { scale: 0, ease: 'back.out(2)'},\n                )\n                nodeData[i].isNew = false;  \n            }\n        }\n\n    }, [ insertCount ])\n\n    const handleInputSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue !== '' && !isNaN(inputValue)) {\n            bst.current.insert(parseFloat(inputValue), insertCount);\n            setNodeData(bst.current.getInOrderArray(bst.current.root, []));\n            setInsertCount(insertCount + 1);\n            setCount(count + 1);\n            setMessage(`${inputValue} inserted into the tree.`);\n        } else {\n            setMessage('Please enter a number (e.g. 32, 2.7).')\n        }\n        setInputValue('');\n    }\n\n    useEffect(() => {\n        console.log(bst.current);\n        console.log({nodeData});\n        console.log({nodeRef});\n        for (let i = 0; i < nodeData.length; i++){\n            gsap.to(\n                nodeRef.current[i],\n                .5,\n                { delay: nodeData[i].isNew ? .4 : 0, y: (nodeData[i].level) * VERTICAL_SPACING , x: HORIZONTAL_SPACING * i - (bst.current.subTreeSize(bst.current.root.left) * HORIZONTAL_SPACING)},\n            );\n            // if (nodeData[i].isNew){\n            //     gsap.from(\n            //         nodeRef.current[i],\n            //         .4,\n            //         { scale: 0, ease: 'back.out(2)'},\n            //    )\n            //     nodeData[i].isNew = false;  \n            // }\n        }\n    }, [ removeCount ] )\n\n    const handleRemoveSubmit = (e) => {\n        e.preventDefault();\n        if (removeValue !== '' && !isNaN(removeValue)) {\n            const success = bst.current.removeRecurse(bst.current.root, parseFloat(removeValue));\n            setNodeData(bst.current.getInOrderArray(bst.current.root, []));\n            success && setMessage('');\n            !success ? bst.current.root === null ? setMessage('Tree is empty.') : setMessage(`${removeValue} not in the tree.`)\n            : setMessage(`${removeValue} removed from the tree.`);\n            if (success) setRemoveCount(removeCount + 1); \n        } else {\n            setMessage('Please enter a number (e.g. 32, 2.7).');\n        }\n        setRemoveValue('');\n    }\n\n    return (\n        <PageContainer>\n            <TreeContainer>\n                <TransitionGroup>\n                    {nodeData.map( (node, i ) =>  \n                        <Transition \n                            key={node.id}\n                            mountOnEnter\n                            unmountOnExit\n                            addEndListener={(node, done) => {\n                                gsap.from(\n                                    node,\n                                     .5,\n                                    {\n                                        scale: 0, \n                                        ease: 'back.out(2)',\n                                        onComplete: done,\n                                    }\n                                )\n                            }}\n                        >\n                            <RefNode key={node.id} node={node} ref={el => nodeRef.current.includes(el) ? nodeRef.current[nodeRef.current.indexOf(el)] = el : nodeRef.current[i] = el}/>\n                        </Transition>\n                    )}\n                </TransitionGroup>\n            </TreeContainer>\n            <ControlContainer>\n                <form onSubmit={handleInputSubmit}>\n                    <input type='text' value={inputValue} placeholder='36' onChange={e => { setInputValue(e.target.value) } }/>\n                </form>\n                <form onSubmit={handleRemoveSubmit}>\n                    <input type='text' value={removeValue} placeholder='72' onChange={e => { setRemoveValue(e.target.value) } }/>\n                </form>\n                <div>Count: <strong>{count}</strong></div>\n                <div>Height: <strong>{bst.current.root ? height + 1 : 0}</strong></div>\n                <div>{message}</div>\n            </ControlContainer>\n        </PageContainer>\n    );\n\n});\n\n\n\nexport default Reftree;\n\n","import React from 'react';\nimport AnimeTest from './animetest';\nimport Navbar from './navbar';\nimport { motion } from 'framer-motion';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n    background-color: #EFE7E2;\n    height: 100vh;\n`   \n\nconst Headline = styled.div`\n    font-family: Ramaraja;\n    font-size: 50px;\n    padding-left: 100px;\n    background-color: #EFE7E2;\n`\n\nfunction BST (props){\n    return (\n        <Wrapper>\n            <Navbar/>\n            <Headline>Binary Search Tree</Headline>\n            <motion.div key=\"home\" variants={props.variants} transition={props.transition} initial=\"pageInit\" animate=\"pageIn\" exit=\"pageOut\">\n                <AnimeTest/>\n            </motion.div>\n        </Wrapper>\n        \n    );\n}\n\nexport default BST;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport Home from './components/home/home'\nimport About from './components/about'\nimport Catalog from './components/catalog'\nimport Premium from './components/premium'\nimport { BrowserRouter as Router, Switch, Route, useLocation } from 'react-router-dom';\nimport TestAnimation from \"./components/testanimation\";\nimport HackAnimation from \"./components/hackanimation\";\nimport {AnimatePresence} from \"framer-motion\";\nimport AnimeTest from './components/animetest';\nimport Reftree from './components/reftest';\nimport BST from './components/bst';\n\nconst PageVariants = {\n    pageIn : {\n        opacity: 1,\n        y: 0,\n        x: 0,\n    },\n    pageInit : {\n        opacity: 0,\n        y: 50,\n        scale: 1,\n    },\n    pageOut : {\n        opacity: 0,\n        y: -50,\n    }\n};\n\nconst PageTransition = {\n    type: \"tween\",\n    ease: \"anticipate\",\n};\n\nfunction App() {\n    let location = useLocation();\n    return (\n          <AnimatePresence exitBeforeEnter>\n              <Switch location={location} key={location.pathname}>\n                  <Route path='/' exact render={(props) => <Home {...props} transition={PageTransition} variants={PageVariants}/>} />\n                  <Route path='/test' exact render={(props) => <Reftree {...props} transition={PageTransition} variants={PageVariants}/>} />\n                  <Route path='/Binary Search Tree' exact render={(props) => <BST {...props} transition={PageTransition} variants={PageVariants}/> } />\n                  <Route path='/about' render={(props) => <About {...props} transition={PageTransition} variants={PageVariants}/>}/>\n                  <Route path='/catalog' exact render={(props) => <Catalog {...props} transition={PageTransition} variants={PageVariants}/>}/>\n                  <Route path='/premium' exact render={(props) => <Premium {...props} transition={PageTransition} variants={PageVariants}/>}/>\n              </Switch>\n          </AnimatePresence>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './resources/fonts/Ramaraja-Regular.ttf';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}